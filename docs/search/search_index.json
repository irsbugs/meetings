{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Meetings Stuff from meetings: slides, code, etc","title":"Meetings"},{"location":"#meetings","text":"Stuff from meetings: slides, code, etc","title":"Meetings"},{"location":"2014/","text":"2014 Meetings of the Hamilton Python Users Group held in 2014 on: 2014-02-24 2014-03-10 2014-04-14 2014-05-12 2014-06-09 2014-07-14 2014-08-18 2014-09-08 2014-10-13 2014-11-10 2014-12-08","title":"2014"},{"location":"2014/#2014","text":"Meetings of the Hamilton Python Users Group held in 2014 on: 2014-02-24 2014-03-10 2014-04-14 2014-05-12 2014-06-09 2014-07-14 2014-08-18 2014-09-08 2014-10-13 2014-11-10 2014-12-08","title":"2014"},{"location":"2014/2014-02-24/","text":"2014-02-24 1 Initial Meeting of Hamilton Python User Group - HamPUG The meeting was held a Waikato University Room MS4.G.02. We discussed the objectives of the HamPUG group and possible content of presentations to be delivered at future meetings.","title":"2014-02-24"},{"location":"2014/2014-02-24/#2014-02-24","text":"","title":"2014-02-24"},{"location":"2014/2014-02-24/#1","text":"","title":"1"},{"location":"2014/2014-02-24/#initial-meeting-of-hamilton-python-user-group-hampug","text":"The meeting was held a Waikato University Room MS4.G.02. We discussed the objectives of the HamPUG group and possible content of presentations to be delivered at future meetings.","title":"Initial Meeting of Hamilton Python User Group - HamPUG"},{"location":"2014/2014-03-10/","text":"2014-03-10 2 Regular Meeting of HamPUG Established that HamPUG monthly meetings would be on the second Monday of the month starting at 7pm. There would not be any meeting for the month of January. No material presented at this meeting was provided for uploading to this github repository.","title":"2014-03-10"},{"location":"2014/2014-03-10/#2014-03-10","text":"","title":"2014-03-10"},{"location":"2014/2014-03-10/#2","text":"","title":"2"},{"location":"2014/2014-03-10/#regular-meeting-of-hampug","text":"Established that HamPUG monthly meetings would be on the second Monday of the month starting at 7pm. There would not be any meeting for the month of January. No material presented at this meeting was provided for uploading to this github repository.","title":"Regular Meeting of HamPUG"},{"location":"2014/2014-04-14/","text":"2014-04-14 3 Introduction Yesterday I did a talk on using Python to scrape all the song lyrics from a particular artist (from lyricsfreak.com) and then create a word cloud from all those lyrics using either using Wordle or using R's wordcloud package. The idea was to get a visual representation of the words that were said the most by a particular band or artist. The two main methods for doing this were through geturl() and getbetween() . geturl() is self-explanatory, and getbetween() allows us to find all strings that are in between two strings, for a particular body of text. So we use this method to basically wrangle data out of the HTML. As I mentioned in the talk, this way of doing things is kind of crude - it's good for quick one-offs or if you don't care about anything apart from getting the data. But there are nicer ways of doing this, such as using BeautifulSoup where you can navigate the DOM of the HTML. Hell, I should probably use that more often too! As mentioned at the start, we used both Wordle and R to generate our wordclouds. Wordle makes nicer wordclouds but it may be less accessible from a programmatic standpoint. R makes reasonably good looking wordclouds but it involves a lot of fiddling with parameters! Usage python get.py > output/out.txt Note that there is a boolean flag in the script called ONLINE - if it's set to true, then it will download the .html files (that correspond to lyrics from each song) and save them to a folder called saved in the same directory as the script. Otherwise if the boolean is set to false it will assume you already have the .html files in that folder and then do everything locally. I have also made other improvements to the script since the presentation, such as having the script create the output directory for you if it doesn't exist, etc. Then you can copy and paste the contents of out.txt into Wordle or use the R script create-cloud.R (if you know R!). Useful links PDF printer for extracting Wordle clouds (Ubuntu) BeautifulSoup sudo pip install BeautifulSoup R wordcloud library","title":"2014-04-14"},{"location":"2014/2014-04-14/#2014-04-14","text":"","title":"2014-04-14"},{"location":"2014/2014-04-14/#3","text":"","title":"3"},{"location":"2014/2014-04-14/#introduction","text":"Yesterday I did a talk on using Python to scrape all the song lyrics from a particular artist (from lyricsfreak.com) and then create a word cloud from all those lyrics using either using Wordle or using R's wordcloud package. The idea was to get a visual representation of the words that were said the most by a particular band or artist. The two main methods for doing this were through geturl() and getbetween() . geturl() is self-explanatory, and getbetween() allows us to find all strings that are in between two strings, for a particular body of text. So we use this method to basically wrangle data out of the HTML. As I mentioned in the talk, this way of doing things is kind of crude - it's good for quick one-offs or if you don't care about anything apart from getting the data. But there are nicer ways of doing this, such as using BeautifulSoup where you can navigate the DOM of the HTML. Hell, I should probably use that more often too! As mentioned at the start, we used both Wordle and R to generate our wordclouds. Wordle makes nicer wordclouds but it may be less accessible from a programmatic standpoint. R makes reasonably good looking wordclouds but it involves a lot of fiddling with parameters!","title":"Introduction"},{"location":"2014/2014-04-14/#usage","text":"python get.py > output/out.txt Note that there is a boolean flag in the script called ONLINE - if it's set to true, then it will download the .html files (that correspond to lyrics from each song) and save them to a folder called saved in the same directory as the script. Otherwise if the boolean is set to false it will assume you already have the .html files in that folder and then do everything locally. I have also made other improvements to the script since the presentation, such as having the script create the output directory for you if it doesn't exist, etc. Then you can copy and paste the contents of out.txt into Wordle or use the R script create-cloud.R (if you know R!).","title":"Usage"},{"location":"2014/2014-04-14/#useful-links","text":"PDF printer for extracting Wordle clouds (Ubuntu) BeautifulSoup sudo pip install BeautifulSoup R wordcloud library","title":"Useful links"},{"location":"2014/2014-05-12/","text":"2014-05-12 4 Presentation on IDLE. IDLE is the I ntegrated D eve L opment E nvironment for Python. It is normally included with a Python distribution. The file IDLE presentation.odp is the slide show for the presentation delivered by Ian Stewart.","title":"2014-05-12"},{"location":"2014/2014-05-12/#2014-05-12","text":"","title":"2014-05-12"},{"location":"2014/2014-05-12/#4","text":"","title":"4"},{"location":"2014/2014-05-12/#presentation-on-idle","text":"IDLE is the I ntegrated D eve L opment E nvironment for Python. It is normally included with a Python distribution. The file IDLE presentation.odp is the slide show for the presentation delivered by Ian Stewart.","title":"Presentation on IDLE."},{"location":"2014/2014-06-09/","text":"2014-06-09 5 Python Integrated Development Environment Presentations Spyder The sub-folder spyderlib contains a README.md and a screenshot.png file for providing an overview of the Spyder IDE. Eric5 IDE for Python - A guide to creating your first graphical application The file Eric Circle Presentation v3.odp is the slide show presented by Ian Stewart. The file Eric Circle Presentation - Code.tar.gz contains all the files that are discussed in the presentation.","title":"2014-06-09"},{"location":"2014/2014-06-09/#2014-06-09","text":"","title":"2014-06-09"},{"location":"2014/2014-06-09/#5","text":"","title":"5"},{"location":"2014/2014-06-09/#python-integrated-development-environment-presentations","text":"","title":"Python Integrated Development Environment Presentations"},{"location":"2014/2014-06-09/#spyder","text":"The sub-folder spyderlib contains a README.md and a screenshot.png file for providing an overview of the Spyder IDE.","title":"Spyder"},{"location":"2014/2014-06-09/#eric5-ide-for-python-a-guide-to-creating-your-first-graphical-application","text":"The file Eric Circle Presentation v3.odp is the slide show presented by Ian Stewart. The file Eric Circle Presentation - Code.tar.gz contains all the files that are discussed in the presentation.","title":"Eric5 IDE for Python - A guide to creating your first graphical application"},{"location":"2014/2014-06-09/spyderlib/","text":"Spyder First impressions Download: https://bitbucket.org/spyder-ide/spyderlib (Note: It used to be on Google Code but has now migrated to Bitbucket.) Upsides Easy on Ubuntu, apt-get install spyder . Yes you can also do pip install spyder but you'd need to handle all of the dependencies, like PyQt4 , etc. Runs fast, doesn't feel particularly complicated. Has IPython support. Downsides Was a pain to install on Windows - I believe the standalone .exe installer has dependencies you have to download. Otherwise you can get it with Python distributions like Anaconda . UI is not particularly splendid, unlike PyCharm! Can't seem to get a fully dark colour scheme going on with the UI (see the screenshot so you know what I mean). Debugging is not the same feel as Eclipse or Visual Studio, the debugging visualization is not within the editor window but within the interpreter window. So it's not particularly as intuitive. Quirks On my laptop (which is Xubuntu), I had this weird issue where starting up Spyder (by typing in spyder on the terminal) did not end up opening the application. It didn't even show up in the list of processes. I had to basically type this instead: spyder --new-instance . I'm not sure as to why I have to do this, but I thought I'd let you know.","title":"Spyder"},{"location":"2014/2014-06-09/spyderlib/#spyder","text":"","title":"Spyder"},{"location":"2014/2014-06-09/spyderlib/#first-impressions","text":"Download: https://bitbucket.org/spyder-ide/spyderlib (Note: It used to be on Google Code but has now migrated to Bitbucket.)","title":"First impressions"},{"location":"2014/2014-06-09/spyderlib/#upsides","text":"Easy on Ubuntu, apt-get install spyder . Yes you can also do pip install spyder but you'd need to handle all of the dependencies, like PyQt4 , etc. Runs fast, doesn't feel particularly complicated. Has IPython support.","title":"Upsides"},{"location":"2014/2014-06-09/spyderlib/#downsides","text":"Was a pain to install on Windows - I believe the standalone .exe installer has dependencies you have to download. Otherwise you can get it with Python distributions like Anaconda . UI is not particularly splendid, unlike PyCharm! Can't seem to get a fully dark colour scheme going on with the UI (see the screenshot so you know what I mean). Debugging is not the same feel as Eclipse or Visual Studio, the debugging visualization is not within the editor window but within the interpreter window. So it's not particularly as intuitive.","title":"Downsides"},{"location":"2014/2014-06-09/spyderlib/#quirks","text":"On my laptop (which is Xubuntu), I had this weird issue where starting up Spyder (by typing in spyder on the terminal) did not end up opening the application. It didn't even show up in the list of processes. I had to basically type this instead: spyder --new-instance . I'm not sure as to why I have to do this, but I thought I'd let you know.","title":"Quirks"},{"location":"2014/2014-07-14/","text":"2014-07-14 6 Observing times taken when looping The file Looping presentation.odp is a brief slide show by Ian Stewart that highlights differing times taken when Python programs perform loops.","title":"2014-07-14"},{"location":"2014/2014-07-14/#2014-07-14","text":"","title":"2014-07-14"},{"location":"2014/2014-07-14/#6","text":"","title":"6"},{"location":"2014/2014-07-14/#observing-times-taken-when-looping","text":"The file Looping presentation.odp is a brief slide show by Ian Stewart that highlights differing times taken when Python programs perform loops.","title":"Observing times taken when looping"},{"location":"2014/2014-08-18/","text":"2014-08-18 7 Virtualenv and Setuptool Peter Reutemann presented virtualenv and using the setuptool python module. The file virtualenv_and_setuptools.odp is Peter's slide show. While PyFunk.tar.gz is a zip of the files involved his setuptools presentation. Update Note as of 2019: venv \u2014 Creation of virtual environments became new in version 3.3 (September 2012). The venv module provides support for creating lightweight \u201cvirtual environments\u201d with their own site directories, optionally isolated from system site directories. The pyvenv script has been deprecated as of Python 3.6 (December 2016) in favor of using python3 -m venv to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on. Deprecated since version 3.6: pyvenv was the recommended tool for creating virtual environments for Python 3.3 and 3.4, and is deprecated in Python 3.6. See: https://docs.python.org/3/library/venv.html","title":"2014-08-18"},{"location":"2014/2014-08-18/#2014-08-18","text":"","title":"2014-08-18"},{"location":"2014/2014-08-18/#7","text":"","title":"7"},{"location":"2014/2014-08-18/#virtualenv-and-setuptool","text":"Peter Reutemann presented virtualenv and using the setuptool python module. The file virtualenv_and_setuptools.odp is Peter's slide show. While PyFunk.tar.gz is a zip of the files involved his setuptools presentation.","title":"Virtualenv and Setuptool"},{"location":"2014/2014-08-18/#update-note-as-of-2019","text":"venv \u2014 Creation of virtual environments became new in version 3.3 (September 2012). The venv module provides support for creating lightweight \u201cvirtual environments\u201d with their own site directories, optionally isolated from system site directories. The pyvenv script has been deprecated as of Python 3.6 (December 2016) in favor of using python3 -m venv to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on. Deprecated since version 3.6: pyvenv was the recommended tool for creating virtual environments for Python 3.3 and 3.4, and is deprecated in Python 3.6. See: https://docs.python.org/3/library/venv.html","title":"Update Note as of 2019:"},{"location":"2014/2014-09-08/","text":"2014-09-08 8 No presentation material availble for uploading.","title":"2014-09-08"},{"location":"2014/2014-09-08/#2014-09-08","text":"","title":"2014-09-08"},{"location":"2014/2014-09-08/#8","text":"No presentation material availble for uploading.","title":"8"},{"location":"2014/2014-10-13/","text":"2014-10-13 9 Do It Yourself Home Monitoring Peter Reutemann presented on Do It Yourself Home Monitoring . See the README in the diy_home_monitoring . The Gooey module See the README in the sub-directory gooey for presentation material details on the gooey module.","title":"2014-10-13"},{"location":"2014/2014-10-13/#2014-10-13","text":"","title":"2014-10-13"},{"location":"2014/2014-10-13/#9","text":"","title":"9"},{"location":"2014/2014-10-13/#do-it-yourself-home-monitoring","text":"Peter Reutemann presented on Do It Yourself Home Monitoring . See the README in the diy_home_monitoring .","title":"Do It Yourself Home Monitoring"},{"location":"2014/2014-10-13/#the-gooey-module","text":"See the README in the sub-directory gooey for presentation material details on the gooey module.","title":"The Gooey module"},{"location":"2014/2014-10-13/diy_home_monitoring/","text":"DIY Home Monitoring Github project: https://github.com/fracpete/change-of-guard Uses OpenCV for motion-detection. Examples ( examples.py ) can be run without the project. FracPete, 2014-10-14","title":"DIY Home Monitoring"},{"location":"2014/2014-10-13/diy_home_monitoring/#diy-home-monitoring","text":"Github project: https://github.com/fracpete/change-of-guard Uses OpenCV for motion-detection. Examples ( examples.py ) can be run without the project. FracPete, 2014-10-14","title":"DIY Home Monitoring"},{"location":"2014/2014-10-13/gooey/","text":"Gooey To get started with Gooey, run this command: git clone https://github.com/chriskiehl/Gooey.git (Alternatively, go here and download the .zip file for it.) Then cd into the resulting directory and run python setup.py install . Now, it might install correctly, but when you go to use it in a project it may not work as you also need wxPython , which you can download here . As I said in the talk, I did manage to get wxPython installed on Linux, but Gooey would actually crash, so I'm not sure if I installed it correctly. However, it worked on Windows for me just fine. I will update this readme file if I manage to get it working. Examples I have included in this folder the really basic \"random number generator\" example, called gooey-rand . For my image scraper, it's here .","title":"Gooey"},{"location":"2014/2014-10-13/gooey/#gooey","text":"To get started with Gooey, run this command: git clone https://github.com/chriskiehl/Gooey.git (Alternatively, go here and download the .zip file for it.) Then cd into the resulting directory and run python setup.py install . Now, it might install correctly, but when you go to use it in a project it may not work as you also need wxPython , which you can download here . As I said in the talk, I did manage to get wxPython installed on Linux, but Gooey would actually crash, so I'm not sure if I installed it correctly. However, it worked on Windows for me just fine. I will update this readme file if I manage to get it working.","title":"Gooey"},{"location":"2014/2014-10-13/gooey/#examples","text":"I have included in this folder the really basic \"random number generator\" example, called gooey-rand . For my image scraper, it's here .","title":"Examples"},{"location":"2014/2014-11-10/","text":"2014-11-10 10 No Presentation material uploaded.","title":"2014-11-10"},{"location":"2014/2014-11-10/#2014-11-10","text":"","title":"2014-11-10"},{"location":"2014/2014-11-10/#10","text":"No Presentation material uploaded.","title":"10"},{"location":"2014/2014-12-08/","text":"2014-12-08 11 How to use data mining on publicly available data. Peter Reutemann demonstrated how the python-weka-wrapper library enables you to use the WEKA machine learning workbench (written in Java) in a Python environment. See the README in the sub-directory datamining Hangman Ian Stewart wrote python scripts to review the Linux English dictionary and strip out the words that are not suitable when playing the game hangman. See the sub-directory hangman .","title":"2014-12-08"},{"location":"2014/2014-12-08/#2014-12-08","text":"","title":"2014-12-08"},{"location":"2014/2014-12-08/#11","text":"","title":"11"},{"location":"2014/2014-12-08/#how-to-use-data-mining-on-publicly-available-data","text":"Peter Reutemann demonstrated how the python-weka-wrapper library enables you to use the WEKA machine learning workbench (written in Java) in a Python environment. See the README in the sub-directory datamining","title":"How to use data mining on publicly available data."},{"location":"2014/2014-12-08/#hangman","text":"Ian Stewart wrote python scripts to review the Linux English dictionary and strip out the words that are not suitable when playing the game hangman. See the sub-directory hangman .","title":"Hangman"},{"location":"2014/2014-12-08/datamining/","text":"Data Mining What is this? Little demonstration of how to use data mining on publicly available data. The python-weka-wrapper library enables you to use the WEKA machine learning workbench (written in Java) in a Python environment. Links: * https://pypi.python.org/pypi/python-weka-wrapper * http://www.cs.waikato.ac.nz/ml/weka/ What is the goal? Is it possible to predict the person posting to the mailing (ie email address) from publicly available mailing list archives? What data is used? Public mailing list archives of the Waikato Linux Users Group: http://list.waikato.ac.nz/pipermail/wlug/ What are the requirements? Linux machine Oracle JDK 1.6+ build environment for C/C++ code pip python-weka-wrapper Misc The list.flow is a workflow file for the ADAMS system, which was used to prototype the data mining task, before translating it to a Python script.","title":"Data Mining"},{"location":"2014/2014-12-08/datamining/#data-mining","text":"","title":"Data Mining"},{"location":"2014/2014-12-08/datamining/#what-is-this","text":"Little demonstration of how to use data mining on publicly available data. The python-weka-wrapper library enables you to use the WEKA machine learning workbench (written in Java) in a Python environment. Links: * https://pypi.python.org/pypi/python-weka-wrapper * http://www.cs.waikato.ac.nz/ml/weka/","title":"What is this?"},{"location":"2014/2014-12-08/datamining/#what-is-the-goal","text":"Is it possible to predict the person posting to the mailing (ie email address) from publicly available mailing list archives?","title":"What is the goal?"},{"location":"2014/2014-12-08/datamining/#what-data-is-used","text":"Public mailing list archives of the Waikato Linux Users Group: http://list.waikato.ac.nz/pipermail/wlug/","title":"What data is used?"},{"location":"2014/2014-12-08/datamining/#what-are-the-requirements","text":"Linux machine Oracle JDK 1.6+ build environment for C/C++ code pip python-weka-wrapper","title":"What are the requirements?"},{"location":"2014/2014-12-08/datamining/#misc","text":"The list.flow is a workflow file for the ADAMS system, which was used to prototype the data mining task, before translating it to a Python script.","title":"Misc"},{"location":"2015/","text":"2015 Meetings of the Hamilton Python Users Group held in 2015 on: 2015-02-09 2015-03-09 2015-04-13 2015-05-11 2015-06-08 2015-07-13 2015-08-10 2015-09-14 2015-10-12 2015-11-09 2015-12-14","title":"2015"},{"location":"2015/#2015","text":"Meetings of the Hamilton Python Users Group held in 2015 on: 2015-02-09 2015-03-09 2015-04-13 2015-05-11 2015-06-08 2015-07-13 2015-08-10 2015-09-14 2015-10-12 2015-11-09 2015-12-14","title":"2015"},{"location":"2015/2015-02-09/","text":"2015-02-09 12 Python frameworks for automated testing Peter Reutemann Peter presented on various python frameworks for automated testing. The file Testing.otp is the slide show of Peter's presentation.","title":"2015-02-09"},{"location":"2015/2015-02-09/#2015-02-09","text":"","title":"2015-02-09"},{"location":"2015/2015-02-09/#12","text":"","title":"12"},{"location":"2015/2015-02-09/#python-frameworks-for-automated-testing","text":"Peter Reutemann Peter presented on various python frameworks for automated testing. The file Testing.otp is the slide show of Peter's presentation.","title":"Python frameworks for automated testing"},{"location":"2015/2015-03-09/","text":"2015-03-09 13 Introduction to Python Lawrence D'Oliveiro presented an Introduction to Python. The notes for the presentation are in the file notes.txt .","title":"2015-03-09"},{"location":"2015/2015-03-09/#2015-03-09","text":"","title":"2015-03-09"},{"location":"2015/2015-03-09/#13","text":"","title":"13"},{"location":"2015/2015-03-09/#introduction-to-python","text":"Lawrence D'Oliveiro presented an Introduction to Python. The notes for the presentation are in the file notes.txt .","title":"Introduction to Python"},{"location":"2015/2015-04-13/","text":"2015-04-13 14 Using Python as the macro script with Libreoffice. Libre Office distribution includes the BASIC scripting language for use with Libre Office applications. Ian Stewart presented the use of Python as an alternative scripting language for Libre Office. Ian also provided code that converts an application that uses python script in the User library, to having the python script embedded in the Libre Office document file. See the sub-directory libreoffice for Ian's presentation material. Collections module and defaultdict Peter Reutemann presented from collections import deque, defaultdict Peter's presentation includes two ipynb files demo-networkx.ipynb and demo.ipynb . To launch Binder website to run the Jupyter server for the file demo-networkx.ipynb click on the following icon... To launch Binder website to run the Jupyter server for the file demo.ipynb click on the following icon...","title":"2015-04-13"},{"location":"2015/2015-04-13/#2015-04-13","text":"","title":"2015-04-13"},{"location":"2015/2015-04-13/#14","text":"","title":"14"},{"location":"2015/2015-04-13/#using-python-as-the-macro-script-with-libreoffice","text":"Libre Office distribution includes the BASIC scripting language for use with Libre Office applications. Ian Stewart presented the use of Python as an alternative scripting language for Libre Office. Ian also provided code that converts an application that uses python script in the User library, to having the python script embedded in the Libre Office document file. See the sub-directory libreoffice for Ian's presentation material.","title":"Using Python as the macro script with Libreoffice."},{"location":"2015/2015-04-13/#collections-module-and-defaultdict","text":"Peter Reutemann presented from collections import deque, defaultdict Peter's presentation includes two ipynb files demo-networkx.ipynb and demo.ipynb . To launch Binder website to run the Jupyter server for the file demo-networkx.ipynb click on the following icon... To launch Binder website to run the Jupyter server for the file demo.ipynb click on the following icon...","title":"Collections module and defaultdict"},{"location":"2015/2015-04-13/libreoffice/","text":"LibreOffice and Python This folder includes the LibreOffice using Python presentation in four parts and the pyinsert.py file. Part 4 of the Libreoffice using Python presentation highlights the use of the python program pyinsert.py. Update for Version 2 of Part 4 : The Part 4 Version 2 presentation reflects changes that have been made to pyinsert.py . This modified file has now be named user2document.py. The changes include: Using a console command line interface to pass input and output files etc to the user2document.py program. This is done using the argparse module. Using the module lxml to perform the modifications to the Manifest and Content xml files. The subfolder pushbuttontimefile contains files that were used/created as part of generating the LibreOffice using python presentation. As follows: pushbuttontime.odg <== Uses the User python macro library. (Original program developed in User library) pushbuttontimesys.odg <== Uses the Shared python macro library pushbuttontimedoc.odg <== Uses the User python macro library (Same as pushbuttontime.odg) pushbuttontimedoc_embeddedpy.odg<== Uses the Document python macro library (i.e. The python script is embedded in the .odg file) pushbutton.py <== python file with the functions pushbutton() and clear(). Placed into User library: ~/.config/libreoffice/4/user/Scripts/python/ ...and Shared library... /usr/lib/libreoffice/share/Scripts/python/ ...and in the Document... /Scripts/python/","title":"LibreOffice and Python"},{"location":"2015/2015-04-13/libreoffice/#libreoffice-and-python","text":"This folder includes the LibreOffice using Python presentation in four parts and the pyinsert.py file. Part 4 of the Libreoffice using Python presentation highlights the use of the python program pyinsert.py. Update for Version 2 of Part 4 : The Part 4 Version 2 presentation reflects changes that have been made to pyinsert.py . This modified file has now be named user2document.py. The changes include: Using a console command line interface to pass input and output files etc to the user2document.py program. This is done using the argparse module. Using the module lxml to perform the modifications to the Manifest and Content xml files. The subfolder pushbuttontimefile contains files that were used/created as part of generating the LibreOffice using python presentation. As follows: pushbuttontime.odg <== Uses the User python macro library. (Original program developed in User library) pushbuttontimesys.odg <== Uses the Shared python macro library pushbuttontimedoc.odg <== Uses the User python macro library (Same as pushbuttontime.odg) pushbuttontimedoc_embeddedpy.odg<== Uses the Document python macro library (i.e. The python script is embedded in the .odg file) pushbutton.py <== python file with the functions pushbutton() and clear(). Placed into User library: ~/.config/libreoffice/4/user/Scripts/python/ ...and Shared library... /usr/lib/libreoffice/share/Scripts/python/ ...and in the Document... /Scripts/python/","title":"LibreOffice and Python"},{"location":"2015/2015-05-11/","text":"2015-05-11 15 Plots and Graphs in Python matplotlib Peter Reutemann presented some example scripts for generating plots using matplotlib See the sub-directory matplotlib . Libreoffice House Ian Stewart presented on how to draw a house in LibreOffice Impress using Python. See the sub-directory libreoffice","title":"2015-05-11"},{"location":"2015/2015-05-11/#2015-05-11","text":"","title":"2015-05-11"},{"location":"2015/2015-05-11/#15","text":"","title":"15"},{"location":"2015/2015-05-11/#plots-and-graphs-in-python","text":"","title":"Plots and Graphs in Python"},{"location":"2015/2015-05-11/#matplotlib","text":"Peter Reutemann presented some example scripts for generating plots using matplotlib See the sub-directory matplotlib .","title":"matplotlib"},{"location":"2015/2015-05-11/#libreoffice-house","text":"Ian Stewart presented on how to draw a house in LibreOffice Impress using Python. See the sub-directory libreoffice","title":"Libreoffice House"},{"location":"2015/2015-05-11/libreoffice/","text":"Python & LibreOffice Using Python in conjunction with LibreOffice. pythonhouse - shows how to draw a house in LibreOffice Impress using Python python version minimum - bonus project for writing efficient code for outputting required Python version","title":"Python & LibreOffice"},{"location":"2015/2015-05-11/libreoffice/#python-libreoffice","text":"Using Python in conjunction with LibreOffice. pythonhouse - shows how to draw a house in LibreOffice Impress using Python python version minimum - bonus project for writing efficient code for outputting required Python version","title":"Python &amp; LibreOffice"},{"location":"2015/2015-05-11/libreoffice/python version minimum/","text":"Python Version Minimum Presentation on 11 May 2015 at Hamilton Python User Group meeting. This presentation is a challenge to write the most efficient code to politely terminate the execution of the python interpreter if the python interpreter is detected to be below the minimum required revision to run the python script. It offers a comparison of efficiency between a for loop and list comprehensions . It also highlights why beautiful is better than ugly is the first line in the Zen of Python!","title":"Python Version Minimum"},{"location":"2015/2015-05-11/libreoffice/python version minimum/#python-version-minimum","text":"Presentation on 11 May 2015 at Hamilton Python User Group meeting. This presentation is a challenge to write the most efficient code to politely terminate the execution of the python interpreter if the python interpreter is detected to be below the minimum required revision to run the python script. It offers a comparison of efficiency between a for loop and list comprehensions . It also highlights why beautiful is better than ugly is the first line in the Zen of Python!","title":"Python Version Minimum"},{"location":"2015/2015-05-11/libreoffice/pythonhouse/","text":"UNO Bridge to LibreOffice Python Universal Network Object (UNO) Bridge to LibreOffice/OpenOffice Presentation at Hamilton Python User Group Meeting on 11 May 2015. After installing the python uno bridge module, LibreOffice is launched with an open communications port. An executing python script using the uno module, can make a connection to the LibreOffice API and create documents or add content to a document, etc. This Impress slide show has snippets of code from the pythonhouse.py example program. To run the pythonhouse.py example program: Install the python uno bridge module: sudo apt-get install python3-uno Ensure that there are no libreoffice/openoffice applications running. Open a terminal window and launch libreoffice with an open port command: soffice \"--accept=socket,host=localhost,port=2002;urp;StarOffice.ServiceManager\" Open another terminal window and run the example program: python3 pythonhouse.py","title":"UNO Bridge to LibreOffice"},{"location":"2015/2015-05-11/libreoffice/pythonhouse/#uno-bridge-to-libreoffice","text":"Python Universal Network Object (UNO) Bridge to LibreOffice/OpenOffice Presentation at Hamilton Python User Group Meeting on 11 May 2015. After installing the python uno bridge module, LibreOffice is launched with an open communications port. An executing python script using the uno module, can make a connection to the LibreOffice API and create documents or add content to a document, etc. This Impress slide show has snippets of code from the pythonhouse.py example program. To run the pythonhouse.py example program: Install the python uno bridge module: sudo apt-get install python3-uno Ensure that there are no libreoffice/openoffice applications running. Open a terminal window and launch libreoffice with an open port command: soffice \"--accept=socket,host=localhost,port=2002;urp;StarOffice.ServiceManager\" Open another terminal window and run the example program: python3 pythonhouse.py","title":"UNO Bridge to LibreOffice"},{"location":"2015/2015-05-11/matplotlib/","text":"Plotting using matplotlib wekalist Contains scripts for visualizing data obtained from the Weka mailing list . Uses line plots and bar plots, legends. scatterplots As the name suggests shows how to use scatter plots in matplotlib. Further reading http://matplotlib.org/gallery.html http://matplotlib.org/examples/","title":"Plotting using matplotlib"},{"location":"2015/2015-05-11/matplotlib/#plotting-using-matplotlib","text":"","title":"Plotting using matplotlib"},{"location":"2015/2015-05-11/matplotlib/#wekalist","text":"Contains scripts for visualizing data obtained from the Weka mailing list . Uses line plots and bar plots, legends.","title":"wekalist"},{"location":"2015/2015-05-11/matplotlib/#scatterplots","text":"As the name suggests shows how to use scatter plots in matplotlib.","title":"scatterplots"},{"location":"2015/2015-05-11/matplotlib/#further-reading","text":"http://matplotlib.org/gallery.html http://matplotlib.org/examples/","title":"Further reading"},{"location":"2015/2015-06-08/","text":"2015-06-08 16 Meeting at The Cook No material was uploaded.","title":"2015-06-08"},{"location":"2015/2015-06-08/#2015-06-08","text":"","title":"2015-06-08"},{"location":"2015/2015-06-08/#16","text":"Meeting at The Cook No material was uploaded.","title":"16"},{"location":"2015/2015-07-13/","text":"2015-07-13 17 Options in the Tkinter GUI. Ian Stewart presented features of Tkinter. The themed toolkit and the options available with messagebox. See the files in the sub-directory ian .","title":"2015-07-13"},{"location":"2015/2015-07-13/#2015-07-13","text":"","title":"2015-07-13"},{"location":"2015/2015-07-13/#17","text":"","title":"17"},{"location":"2015/2015-07-13/#options-in-the-tkinter-gui","text":"Ian Stewart presented features of Tkinter. The themed toolkit and the options available with messagebox. See the files in the sub-directory ian .","title":"Options in the Tkinter GUI."},{"location":"2015/2015-08-10/","text":"2015-08-10 18 No presentation material available","title":"2015-08-10"},{"location":"2015/2015-08-10/#2015-08-10","text":"","title":"2015-08-10"},{"location":"2015/2015-08-10/#18","text":"No presentation material available","title":"18"},{"location":"2015/2015-09-14/","text":"2015-09-14 19 Demostration of two python programs Ian Stewart demonstrated two of his python programs. The programs are the files loadscript.py and cadence_hampug_demo.py . loadscript.py loadscript.py is designed to load a python script file or bash script file from a current development folder and place it into /usr/local/bin/ folder. The files name will be truncated. For example, myprog_v3.py will become myprog . The permissions on the file copied to /usr/local/bin are modified, and the file is checked to ensure it has a shebang in the first line. E.g. #!/usr/bin/env python3 The script may now be executed at the command line by just typing the file name and providing any input options or arguments the program requires. E.g. $ myprog -i test.txt Please see the $ loadscript --documentation and the $ loadscript --help for more details. cadence_hampug_demo.py cadence is a command line program to model a bikes pedalling cadence to its speed depending on what gears are used. cadence features the generic function query() to solicit input from the User. The query() function ensures the User types on the keyboard a response that is acceptable to the desired data type of either string, boolean, integer or floating point. Type $ cadence_hampug_demo.py --help for more information.","title":"2015-09-14"},{"location":"2015/2015-09-14/#2015-09-14","text":"","title":"2015-09-14"},{"location":"2015/2015-09-14/#19","text":"","title":"19"},{"location":"2015/2015-09-14/#demostration-of-two-python-programs","text":"Ian Stewart demonstrated two of his python programs. The programs are the files loadscript.py and cadence_hampug_demo.py .","title":"Demostration of two python programs"},{"location":"2015/2015-09-14/#loadscriptpy","text":"loadscript.py is designed to load a python script file or bash script file from a current development folder and place it into /usr/local/bin/ folder. The files name will be truncated. For example, myprog_v3.py will become myprog . The permissions on the file copied to /usr/local/bin are modified, and the file is checked to ensure it has a shebang in the first line. E.g. #!/usr/bin/env python3 The script may now be executed at the command line by just typing the file name and providing any input options or arguments the program requires. E.g. $ myprog -i test.txt Please see the $ loadscript --documentation and the $ loadscript --help for more details.","title":"loadscript.py"},{"location":"2015/2015-09-14/#cadence_hampug_demopy","text":"cadence is a command line program to model a bikes pedalling cadence to its speed depending on what gears are used. cadence features the generic function query() to solicit input from the User. The query() function ensures the User types on the keyboard a response that is acceptable to the desired data type of either string, boolean, integer or floating point. Type $ cadence_hampug_demo.py --help for more information.","title":"cadence_hampug_demo.py"},{"location":"2015/2015-10-12/","text":"2015-10-12 20 Command Line Parsing Frameworks Brief presentations were delivered on some of the command line parsing Python modules. begin - Command line programs for busy developers plac - The smartest command line arguments parser in the world sys.argv - Most command line arguments parsers initially use Also, in the form of a quiz, there is a presentation is designed to highlight the number of lines of code involved in using sys.argv, argparse, and plac. Refer to the sub-directories: begins , plac , quiz , and sys.argv .","title":"2015-10-12"},{"location":"2015/2015-10-12/#2015-10-12","text":"","title":"2015-10-12"},{"location":"2015/2015-10-12/#20","text":"","title":"20"},{"location":"2015/2015-10-12/#command-line-parsing-frameworks","text":"Brief presentations were delivered on some of the command line parsing Python modules. begin - Command line programs for busy developers plac - The smartest command line arguments parser in the world sys.argv - Most command line arguments parsers initially use Also, in the form of a quiz, there is a presentation is designed to highlight the number of lines of code involved in using sys.argv, argparse, and plac. Refer to the sub-directories: begins , plac , quiz , and sys.argv .","title":"Command Line Parsing Frameworks"},{"location":"2015/2015-10-12/begins/","text":"begins begins is described as Command line programs for busy developers . And you couldn't describe it any better. Example The following code can be invoked from the command-line and uses only two begins related lines: import begin @begin.start def run(name='Arther', quest='Holy Grail', colour='blue', *knights): \"tis but a scratch!\" Generates the following beautiful command-line help: usage: example.py [-h] [-n NAME] [-q QUEST] [-c COLOUR] [knights [knights ...]] tis but a scratch! positional arguments: knights optional arguments: -h, --help show this help message and exit -n NAME, --name NAME (default: Arther) -q QUEST, --quest QUEST (default: Holy Grail) -c COLOUR, --colour COLOUR (default: blue) Code oldfashioned.py -- using manually parsing of sys.argv begins.py -- same as oldfashioned.py but using begins begins_additional.py -- collects additional parameters begins_mult.py -- shows what happens when several method parameters start with the same character","title":"begins"},{"location":"2015/2015-10-12/begins/#begins","text":"begins is described as Command line programs for busy developers . And you couldn't describe it any better.","title":"begins"},{"location":"2015/2015-10-12/begins/#example","text":"The following code can be invoked from the command-line and uses only two begins related lines: import begin @begin.start def run(name='Arther', quest='Holy Grail', colour='blue', *knights): \"tis but a scratch!\" Generates the following beautiful command-line help: usage: example.py [-h] [-n NAME] [-q QUEST] [-c COLOUR] [knights [knights ...]] tis but a scratch! positional arguments: knights optional arguments: -h, --help show this help message and exit -n NAME, --name NAME (default: Arther) -q QUEST, --quest QUEST (default: Holy Grail) -c COLOUR, --colour COLOUR (default: blue)","title":"Example"},{"location":"2015/2015-10-12/begins/#code","text":"oldfashioned.py -- using manually parsing of sys.argv begins.py -- same as oldfashioned.py but using begins begins_additional.py -- collects additional parameters begins_mult.py -- shows what happens when several method parameters start with the same character","title":"Code"},{"location":"2015/2015-10-12/plac/","text":"Plac The author of Plac claims it to be the smartest command line arguments parser in the world . This presentation provides background information, installation and examples of using Plac.","title":"Plac"},{"location":"2015/2015-10-12/plac/#plac","text":"The author of Plac claims it to be the smartest command line arguments parser in the world . This presentation provides background information, installation and examples of using Plac.","title":"Plac"},{"location":"2015/2015-10-12/quiz/","text":"Quiz In the form of a quiz, this presentation is designed to highlight the number of lines of code involved in using sys.argv, argparse, and plac. It highlights the argparse add_argument 's type to open a file. For example type=argparse.FileType('r') .","title":"Quiz"},{"location":"2015/2015-10-12/quiz/#quiz","text":"In the form of a quiz, this presentation is designed to highlight the number of lines of code involved in using sys.argv, argparse, and plac. It highlights the argparse add_argument 's type to open a file. For example type=argparse.FileType('r') .","title":"Quiz"},{"location":"2015/2015-10-12/sys.argv/","text":"sys module sys.argv This sys module presentation highlights the sys.argv list. Most command line arguments parsers initially use sys.argv .","title":"sys module sys.argv"},{"location":"2015/2015-10-12/sys.argv/#sys-module-sysargv","text":"This sys module presentation highlights the sys.argv list. Most command line arguments parsers initially use sys.argv .","title":"sys module sys.argv"},{"location":"2015/2015-11-09/","text":"2015-11-09 21 Pelican is a static site generator Pelican is a static site generator, written in Python. Refer to the sub-directory pelican . pyudev module Detecting Insertion and Removal of a USB device using pyudev. Ian Stewart presented an introduction to the effects of inserting and removing a USB device. The Pyudev module is used to monitor and callback on the insertion and removal of a USB device. Refer to the sub-directory pyudev .","title":"2015-11-09"},{"location":"2015/2015-11-09/#2015-11-09","text":"","title":"2015-11-09"},{"location":"2015/2015-11-09/#21","text":"","title":"21"},{"location":"2015/2015-11-09/#pelican-is-a-static-site-generator","text":"Pelican is a static site generator, written in Python. Refer to the sub-directory pelican .","title":"Pelican is a static site generator"},{"location":"2015/2015-11-09/#pyudev-module","text":"Detecting Insertion and Removal of a USB device using pyudev. Ian Stewart presented an introduction to the effects of inserting and removing a USB device. The Pyudev module is used to monitor and callback on the insertion and removal of a USB device. Refer to the sub-directory pyudev .","title":"pyudev module"},{"location":"2015/2015-11-09/pelican/Pelican/","text":"Pelican Pelican is a static site generator, written in Python. Content is written in reStructuredText Markdown AsciiDoc And then compiled into HTML. Links Homepage http://blog.getpelican.com/ Documentation http://docs.getpelican.com/en/ Themes https://github.com/getpelican/pelican-themes/ Installation NB: Best to do this in a virtualenv! setup virtualenv mkdir pelican virtualenv --system-site-packages pelican cd pelican source bin/activate install via pip pip install pelican install Markdown support pip install Markdown First project Use the Pelican wizard pelican-quickstart The content of the website goes into content sub-directory Pages go into special sub-directory content/pages , get added to menu using their title. Articles , as in blog post, just get stored anywhere in content . Category of article is menu item. Create first article ( content/first.md ) ``` Title: First post Date: 2015-11-09 10:20 Category: Blog This is my first post ``` Reference an image using the {filename} placeholder as reference for path ![alt text]({filename}/images/theimage.png) Generate HTML pelican content run webserver cd output python -m pelican.server open browser with http://localhost:8000/ Install and use a theme clone the theme that you like git clone https://github.com/DandyDev/pelican-bootstrap3.git install the theme pelican-theme -i ~/some/where/pelican-bootstrap3 use theme by setting the THEME property THEME = 'pelican-bootstrap3' re-generate the HTML pelican content","title":"Pelican"},{"location":"2015/2015-11-09/pelican/Pelican/#pelican","text":"Pelican is a static site generator, written in Python. Content is written in reStructuredText Markdown AsciiDoc And then compiled into HTML.","title":"Pelican"},{"location":"2015/2015-11-09/pelican/Pelican/#links","text":"Homepage http://blog.getpelican.com/ Documentation http://docs.getpelican.com/en/ Themes https://github.com/getpelican/pelican-themes/","title":"Links"},{"location":"2015/2015-11-09/pelican/Pelican/#installation","text":"NB: Best to do this in a virtualenv! setup virtualenv mkdir pelican virtualenv --system-site-packages pelican cd pelican source bin/activate install via pip pip install pelican install Markdown support pip install Markdown","title":"Installation"},{"location":"2015/2015-11-09/pelican/Pelican/#first-project","text":"Use the Pelican wizard pelican-quickstart The content of the website goes into content sub-directory Pages go into special sub-directory content/pages , get added to menu using their title. Articles , as in blog post, just get stored anywhere in content . Category of article is menu item. Create first article ( content/first.md ) ``` Title: First post Date: 2015-11-09 10:20 Category: Blog This is my first post ``` Reference an image using the {filename} placeholder as reference for path ![alt text]({filename}/images/theimage.png) Generate HTML pelican content run webserver cd output python -m pelican.server open browser with http://localhost:8000/","title":"First project"},{"location":"2015/2015-11-09/pelican/Pelican/#install-and-use-a-theme","text":"clone the theme that you like git clone https://github.com/DandyDev/pelican-bootstrap3.git install the theme pelican-theme -i ~/some/where/pelican-bootstrap3 use theme by setting the THEME property THEME = 'pelican-bootstrap3' re-generate the HTML pelican content","title":"Install and use a theme"},{"location":"2015/2015-11-09/pyudev/","text":"Detecting Insertion and Removal of a USB device using pyudev. An introduction to the effects of inserting and removing a USB device. Pyudev module is used to monitor and callback on the insertion and removal of a USB device. Pyudev monitoring is supported in the pyqt4, pyside, glib, and wxWidgets GUI toolkits. The four demo programs use the wxWidgets toolkit, but they may be easily converted to use one of the other supported GUI toolkits.","title":"Detecting Insertion and Removal of a USB device using pyudev."},{"location":"2015/2015-11-09/pyudev/#detecting-insertion-and-removal-of-a-usb-device-using-pyudev","text":"An introduction to the effects of inserting and removing a USB device. Pyudev module is used to monitor and callback on the insertion and removal of a USB device. Pyudev monitoring is supported in the pyqt4, pyside, glib, and wxWidgets GUI toolkits. The four demo programs use the wxWidgets toolkit, but they may be easily converted to use one of the other supported GUI toolkits.","title":"Detecting Insertion and Removal of a USB device using pyudev."},{"location":"2015/2015-12-14/","text":"2015-12-14 22 RPi.GPIO Ian Stewart presented the RPi.GPIO python module. The Raspberry Pi computer has a connector to provide physical access to connect LED's and switches, etc., to the General Purpose Input and Output (GPIO) signals. The python module RPi.GPIO allows a selection of pins on this connector to be configured to receive input, or generate output signals. RPi.GPIO also supports providing a Pulse Width Modulation (PWM) output signal. The Raspian distro provides a Debian based GUI desktop environment for the Raspberry Pi. Included in Raspian are Python 2 & 3, the tkinter/ttk GUI tool kit, and the Integrated Development Environment IDLE. Raspian also includes the python module RPi.GPIO. As well as the slide show presentation material, there are 9 demonstration programs to highlight features of the RPi.GPIO module. Most of these programs utilize the tkinter GUI and use the themed tool kit (ttk). A brief summary of these programs is as follows: 01_demo_get_pin.py \u2013 Display P1 Connector pins. 02_demo_rpi_package.py \u2013 Display information on the python Rpi.GPIO package. 03_demo_ttk_1_led.py \u2013 Using the tkinter GUI, turn on and off a LED. 04_demo_ttk_4_led_counter_simple.py \u2013 4 x LED's counting in binary from 0 to 15. 05_demo_ttk_4_led_counter_complex.py - 4 x LED's counting in binary. Uses [::-1] 06_demo_ttk_4_led_counter_inc_dec.py \u2013 Use tkinker GUI to increment/decrement counter. 07_demo_ttk_2_switches.py \u2013 Receive input from two switches. NB: Run as sudo. 08_demo_ttk_pwm_linear.py \u2013 Pulse Width Modulation with a linear frequency scale. 09_demo_ttk_pwm_exponential.py - Pulse Width Modulation with an exponential scale.","title":"2015-12-14"},{"location":"2015/2015-12-14/#2015-12-14","text":"","title":"2015-12-14"},{"location":"2015/2015-12-14/#22","text":"","title":"22"},{"location":"2015/2015-12-14/#rpigpio","text":"Ian Stewart presented the RPi.GPIO python module. The Raspberry Pi computer has a connector to provide physical access to connect LED's and switches, etc., to the General Purpose Input and Output (GPIO) signals. The python module RPi.GPIO allows a selection of pins on this connector to be configured to receive input, or generate output signals. RPi.GPIO also supports providing a Pulse Width Modulation (PWM) output signal. The Raspian distro provides a Debian based GUI desktop environment for the Raspberry Pi. Included in Raspian are Python 2 & 3, the tkinter/ttk GUI tool kit, and the Integrated Development Environment IDLE. Raspian also includes the python module RPi.GPIO. As well as the slide show presentation material, there are 9 demonstration programs to highlight features of the RPi.GPIO module. Most of these programs utilize the tkinter GUI and use the themed tool kit (ttk). A brief summary of these programs is as follows: 01_demo_get_pin.py \u2013 Display P1 Connector pins. 02_demo_rpi_package.py \u2013 Display information on the python Rpi.GPIO package. 03_demo_ttk_1_led.py \u2013 Using the tkinter GUI, turn on and off a LED. 04_demo_ttk_4_led_counter_simple.py \u2013 4 x LED's counting in binary from 0 to 15. 05_demo_ttk_4_led_counter_complex.py - 4 x LED's counting in binary. Uses [::-1] 06_demo_ttk_4_led_counter_inc_dec.py \u2013 Use tkinker GUI to increment/decrement counter. 07_demo_ttk_2_switches.py \u2013 Receive input from two switches. NB: Run as sudo. 08_demo_ttk_pwm_linear.py \u2013 Pulse Width Modulation with a linear frequency scale. 09_demo_ttk_pwm_exponential.py - Pulse Width Modulation with an exponential scale.","title":"RPi.GPIO"},{"location":"2016/","text":"2016 Meetings of the Hamilton Python Users Group held in 2016 on: 2016-02-08 2016-03-14 2016-04-11 2016-05-09 2016-06-13 2016-07-11 2016-08-08 2016-09-12 2016-10-10 2016-11-14 2016-12-13","title":"2016"},{"location":"2016/#2016","text":"Meetings of the Hamilton Python Users Group held in 2016 on: 2016-02-08 2016-03-14 2016-04-11 2016-05-09 2016-06-13 2016-07-11 2016-08-08 2016-09-12 2016-10-10 2016-11-14 2016-12-13","title":"2016"},{"location":"2016/2016-02-08/","text":"2016-02-08/ 23 IPython Lawrence D'Oliveiro delivered a presentation on IPython. Lawrence provided two ipynb files, Exponential Series.ipynb and Solid Angle Of A Circle.ipynb . The file Exponential Series.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Exponential Series v4.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Solid Angle Of A Circle.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Solid Angle Of A Circle v4.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... Presentation Notes IPython is an interactive shell, originally for Python. Though it is now being generalized, via the Jupyter project, to handle other languages on an equal basis. IPython interfaces to the language implementation via its own \u201ckernel\u201d process. Separate from the kernel is the front end, of which there are three: one based on a character terminal, one built with the Qt GUI toolkit, and the web-based notebook interface. Of the three, the notebook interface is the most powerful, it\u2019s the only one I have much experience with, and it is the one I will talk about here. If you\u2019ve used Mathematica, the notebook concept will be very familiar. The kernel process maintains a context for script programs that is preserved for as long as the kernel remains running. Thus, you can feed a command to define a variable or open a file, and then later send another command to access that variable or do something with that file. When the kernel is terminated, all such context is lost. The notebook server is a custom web server, so the user interface can be provided via any modern web browser. A notebook file (extension \u201c.ipynb\u201d) is actually a text file in JSON format. Its content is a sequence of cells. Each cell can contain program-language text (in Python, in this case) to be executed by the kernel, or text that is only to be read by the user of the notebook, which can be nicely formatted using Markdown markup. The latter text can also include mathematical formulas in the appropriate subset of LATEX markup, implemented by the MathJax library, which is written in JavaScript and does all its actual rendering in the web browser. Program cells can generate text or graphical output, which is displayed immediately following the cell when it is executed. They can also generate Markdown or mathematical markup by using the appropriate API calls, allowing the convenient display of dynamically-generated formatted text or mathematical formulas as well as more general graphics. Not only that, but program code can also define simple interactive \u201cwidgets\u201d (e.g. sliders, text-input fields) to create a very basic custom GUI that allows the user to interact with the cell output. The notebook file saves the original cell content, along with the formatted representation of non-program cells. Remember that the in-memory program context (variables, open files etc) lives only in the kernel process, not the notebook front-end. There is no command that simply saves the current notebook under its current name. There is a \u201cSave and Checkpoint\u201d command, which saves the notebook and also makes a time-stamped \u201ccheckpoint\u201d copy in the \u201c.ipynb_checkpoints\u201d subdirectory. Also the notebooks is periodically autosaved, at an interval that defaults to 2 minutes. Alternatively, you can simply close the notebook window/tab; if there are unsaved changes, you get prompted whether you really want to leave the page. Regardless of what you select here, the notebook will be saved. What about security? First of all, a notebook can execute arbitrary code. The notebook server, and the kernel, make no attempt to constrain the kinds of programs that can be executed. The assumption is that these are running on machines under the user\u2019s control, executing code specified by the user. Therefore it is not their job to limit what the user can do. There is another issue, that of receiving a notebook from another (possibly untrusted) source and executing arbitrary code from that. IPython doesn\u2019t prevent you from doing this. But it will not automatically execute JavaScript from cached cell output, unless the notebook signature is verified against a key known to the user https://ipython.org/ipython-doc/3/notebook/security.html . Normally each user generates their own key, but it is possible to share keys with trusted colleagues. IPython lets you set up multiple profiles, and easily switch between them. These let you create different sets of custom default settings for different usages. Profiles can also be used to isolate trust between different groups that you work with.","title":"2016-02-08/"},{"location":"2016/2016-02-08/#2016-02-08","text":"","title":"2016-02-08/"},{"location":"2016/2016-02-08/#23","text":"","title":"23"},{"location":"2016/2016-02-08/#ipython","text":"Lawrence D'Oliveiro delivered a presentation on IPython. Lawrence provided two ipynb files, Exponential Series.ipynb and Solid Angle Of A Circle.ipynb . The file Exponential Series.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Exponential Series v4.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Solid Angle Of A Circle.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon... The file Solid Angle Of A Circle v4.ipynb may be launched using the binder Jupyter kernel by clicking on the following icon...","title":"IPython"},{"location":"2016/2016-02-08/#presentation-notes","text":"IPython is an interactive shell, originally for Python. Though it is now being generalized, via the Jupyter project, to handle other languages on an equal basis. IPython interfaces to the language implementation via its own \u201ckernel\u201d process. Separate from the kernel is the front end, of which there are three: one based on a character terminal, one built with the Qt GUI toolkit, and the web-based notebook interface. Of the three, the notebook interface is the most powerful, it\u2019s the only one I have much experience with, and it is the one I will talk about here. If you\u2019ve used Mathematica, the notebook concept will be very familiar. The kernel process maintains a context for script programs that is preserved for as long as the kernel remains running. Thus, you can feed a command to define a variable or open a file, and then later send another command to access that variable or do something with that file. When the kernel is terminated, all such context is lost. The notebook server is a custom web server, so the user interface can be provided via any modern web browser. A notebook file (extension \u201c.ipynb\u201d) is actually a text file in JSON format. Its content is a sequence of cells. Each cell can contain program-language text (in Python, in this case) to be executed by the kernel, or text that is only to be read by the user of the notebook, which can be nicely formatted using Markdown markup. The latter text can also include mathematical formulas in the appropriate subset of LATEX markup, implemented by the MathJax library, which is written in JavaScript and does all its actual rendering in the web browser. Program cells can generate text or graphical output, which is displayed immediately following the cell when it is executed. They can also generate Markdown or mathematical markup by using the appropriate API calls, allowing the convenient display of dynamically-generated formatted text or mathematical formulas as well as more general graphics. Not only that, but program code can also define simple interactive \u201cwidgets\u201d (e.g. sliders, text-input fields) to create a very basic custom GUI that allows the user to interact with the cell output. The notebook file saves the original cell content, along with the formatted representation of non-program cells. Remember that the in-memory program context (variables, open files etc) lives only in the kernel process, not the notebook front-end. There is no command that simply saves the current notebook under its current name. There is a \u201cSave and Checkpoint\u201d command, which saves the notebook and also makes a time-stamped \u201ccheckpoint\u201d copy in the \u201c.ipynb_checkpoints\u201d subdirectory. Also the notebooks is periodically autosaved, at an interval that defaults to 2 minutes. Alternatively, you can simply close the notebook window/tab; if there are unsaved changes, you get prompted whether you really want to leave the page. Regardless of what you select here, the notebook will be saved. What about security? First of all, a notebook can execute arbitrary code. The notebook server, and the kernel, make no attempt to constrain the kinds of programs that can be executed. The assumption is that these are running on machines under the user\u2019s control, executing code specified by the user. Therefore it is not their job to limit what the user can do. There is another issue, that of receiving a notebook from another (possibly untrusted) source and executing arbitrary code from that. IPython doesn\u2019t prevent you from doing this. But it will not automatically execute JavaScript from cached cell output, unless the notebook signature is verified against a key known to the user https://ipython.org/ipython-doc/3/notebook/security.html . Normally each user generates their own key, but it is possible to share keys with trusted colleagues. IPython lets you set up multiple profiles, and easily switch between them. These let you create different sets of custom default settings for different usages. Profiles can also be used to isolate trust between different groups that you work with.","title":"Presentation Notes"},{"location":"2016/2016-03-14/","text":"2016-03-14 24 An Introduction to Python. Multiple presentations were delivered to show the features Python and its capabilities. Presenters were: William Mckee, Lawrence D'Oliveiro and Ian Stewart. The following presentation were delivered: An overview of Python Ian Stewart presented this overview of Python, its history and popularity. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 1 to 11. Python on a Raspberry Pi Using Python on a Raspberry Pi to control GPIO ports with LED's attached. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 13 to 17 Two python program running on the RPi were demonstrated. These programs are /irsbugs/06_demo_ttk_4_led_counter_inc_dec.py and /irsbugs/09_demo_ttk_pwm_exponential.py . Installing Python3 Installing Python3 and looking at: help(), builtins, pydoc3, PIPy, IPython/Jupyter. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 22 to 33 Python Universal Network Object (uno) Bridge Demonstation of a python script using the python Universal Network Object (uno) Bridge module so that a python script will generate a LibreOffice Draw document. See slides 38 and 39. Refer to the file: /irsbugs/pythonhouse-2016-03-14.py . Nikola static web-site generator William Mckee demonstated Nikola, a static web-site generator, that is written in python. Refer to the file: /irsbugs/nikola-march.svg . Introduction to Programming in Python Lawrence D'Oliveiro presented an Introduction to Programming in Python. Refer to the file: /ldo/Python Intro Talk.ipynb . The ipynb presentation by Lawrence may be launched by binder by clicking on the icon below The ipynb version 4 presentation by Lawrence may be launched by binder by clicking on the icon below","title":"2016-03-14"},{"location":"2016/2016-03-14/#2016-03-14","text":"","title":"2016-03-14"},{"location":"2016/2016-03-14/#24","text":"","title":"24"},{"location":"2016/2016-03-14/#an-introduction-to-python","text":"Multiple presentations were delivered to show the features Python and its capabilities. Presenters were: William Mckee, Lawrence D'Oliveiro and Ian Stewart. The following presentation were delivered:","title":"An Introduction to Python."},{"location":"2016/2016-03-14/#an-overview-of-python","text":"Ian Stewart presented this overview of Python, its history and popularity. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 1 to 11.","title":"An overview of Python"},{"location":"2016/2016-03-14/#python-on-a-raspberry-pi","text":"Using Python on a Raspberry Pi to control GPIO ports with LED's attached. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 13 to 17 Two python program running on the RPi were demonstrated. These programs are /irsbugs/06_demo_ttk_4_led_counter_inc_dec.py and /irsbugs/09_demo_ttk_pwm_exponential.py .","title":"Python on a Raspberry Pi"},{"location":"2016/2016-03-14/#installing-python3","text":"Installing Python3 and looking at: help(), builtins, pydoc3, PIPy, IPython/Jupyter. Refer to the file: /irsbugs/Introduction to Python - Overall Presentation .odp . Slides 22 to 33","title":"Installing Python3"},{"location":"2016/2016-03-14/#python-universal-network-object-uno-bridge","text":"Demonstation of a python script using the python Universal Network Object (uno) Bridge module so that a python script will generate a LibreOffice Draw document. See slides 38 and 39. Refer to the file: /irsbugs/pythonhouse-2016-03-14.py .","title":"Python Universal Network Object (uno) Bridge"},{"location":"2016/2016-03-14/#nikola-static-web-site-generator","text":"William Mckee demonstated Nikola, a static web-site generator, that is written in python. Refer to the file: /irsbugs/nikola-march.svg .","title":"Nikola static web-site generator"},{"location":"2016/2016-03-14/#introduction-to-programming-in-python","text":"Lawrence D'Oliveiro presented an Introduction to Programming in Python. Refer to the file: /ldo/Python Intro Talk.ipynb . The ipynb presentation by Lawrence may be launched by binder by clicking on the icon below The ipynb version 4 presentation by Lawrence may be launched by binder by clicking on the icon below","title":"Introduction to Programming in Python"},{"location":"2016/2016-04-11/","text":"2016-04-11 25 Python in the Digital Technologies subject at NZ secondary schools Ian Stewart presented examples of using python as part of the New Zealand Secondary Schools, Digital Technologies subject which is a component of the National Ceritificate of Educational Achievement (NCEA) levels 1 to 3. For the slide show refer to the file: /ncea presentation/Python for NCEA units.odp . Also included are a series of circle_x.py programs. These are to demonstrate levels of complexity in python programming techniques. The NCEA Level3 Digital Technologies Unit 91637 is titled Develop a complex computer program for a specified task . An example of a program that might meet this specification is the file /prime_number/prime_number_locater.py . There are also two other prime number locator programs which may be of interest prime_number_locater_minimal_recursion.py and prime_number_rabinmiller.py .","title":"2016-04-11"},{"location":"2016/2016-04-11/#2016-04-11","text":"","title":"2016-04-11"},{"location":"2016/2016-04-11/#25","text":"","title":"25"},{"location":"2016/2016-04-11/#python-in-the-digital-technologies-subject-at-nz-secondary-schools","text":"Ian Stewart presented examples of using python as part of the New Zealand Secondary Schools, Digital Technologies subject which is a component of the National Ceritificate of Educational Achievement (NCEA) levels 1 to 3. For the slide show refer to the file: /ncea presentation/Python for NCEA units.odp . Also included are a series of circle_x.py programs. These are to demonstrate levels of complexity in python programming techniques. The NCEA Level3 Digital Technologies Unit 91637 is titled Develop a complex computer program for a specified task . An example of a program that might meet this specification is the file /prime_number/prime_number_locater.py . There are also two other prime number locator programs which may be of interest prime_number_locater_minimal_recursion.py and prime_number_rabinmiller.py .","title":"Python in the Digital Technologies subject at NZ secondary schools"},{"location":"2016/2016-04-11/ncea presentation/","text":"NCEA Python for NCEA units.odp is a slide show that may be useful in understanding the New Zealand secondary school National Certificate of Education (NCEA) processes. Computing and Digital Technologies are two subjects in the secondary school ciriculum. Some of the units in these subjects may be completed using python. Also included are a series of circle_x.py programs. These are to demonstrate levels of complexity in python programming techniques. From non-structured, to using functions, using classes, and importing modules.","title":"NCEA"},{"location":"2016/2016-04-11/ncea presentation/#ncea","text":"Python for NCEA units.odp is a slide show that may be useful in understanding the New Zealand secondary school National Certificate of Education (NCEA) processes. Computing and Digital Technologies are two subjects in the secondary school ciriculum. Some of the units in these subjects may be completed using python. Also included are a series of circle_x.py programs. These are to demonstrate levels of complexity in python programming techniques. From non-structured, to using functions, using classes, and importing modules.","title":"NCEA"},{"location":"2016/2016-04-11/prime_number/","text":"Prime number prime_number_locater.py is an example program designed to meet the specification of the NCEA Level3 Digital Technologies Unit 91637 titled Develop a complex computer program for a specified task . Launch the program and selct Help from the menu bar, then select the specification information for more of the NCEA details. The program is designed to locate prime numbers based on four algorithms. A timer provides the duration taken to locate prime numbers, so that a comparison of the efficiency of the algorithms may be observed. The program also requires the 4 x text files to reside in the same folder in order to provide the help and other information. Also included are to python command line scripts that may be used to locate or generate prime numbers: prime_number_locater_minimal_recursion.py prime_number_rabinmiller.py","title":"Prime number"},{"location":"2016/2016-04-11/prime_number/#prime-number","text":"prime_number_locater.py is an example program designed to meet the specification of the NCEA Level3 Digital Technologies Unit 91637 titled Develop a complex computer program for a specified task . Launch the program and selct Help from the menu bar, then select the specification information for more of the NCEA details. The program is designed to locate prime numbers based on four algorithms. A timer provides the duration taken to locate prime numbers, so that a comparison of the efficiency of the algorithms may be observed. The program also requires the 4 x text files to reside in the same folder in order to provide the help and other information. Also included are to python command line scripts that may be used to locate or generate prime numbers: prime_number_locater_minimal_recursion.py prime_number_rabinmiller.py","title":"Prime number"},{"location":"2016/2016-05-09/","text":"2016-05-09 26 Python 2.7 to Python 3 Peter Reutemann provided a presentation on migrating Python 2.7 to Pythyon 3. His presentation includes the files /python2to3experiences/python2python3.pdf and /python2to3experiences/python2to3migration.md","title":"2016-05-09"},{"location":"2016/2016-05-09/#2016-05-09","text":"","title":"2016-05-09"},{"location":"2016/2016-05-09/#26","text":"","title":"26"},{"location":"2016/2016-05-09/#python-27-to-python-3","text":"Peter Reutemann provided a presentation on migrating Python 2.7 to Pythyon 3. His presentation includes the files /python2to3experiences/python2python3.pdf and /python2to3experiences/python2to3migration.md","title":"Python 2.7 to Python 3"},{"location":"2016/2016-05-09/python2to3experiences/python2to3migration/","text":"Python 2.7 to 3 migration Project Python 2.7 project: https://github.com/fracpete/python-weka-wrapper Python 3 result: https://github.com/fracpete/python-weka-wrapper3 Details Some things have changed: renamed xrange to range different format for exceptions ( as already available in 2.7) python except Exception, e: becomes python except Exception as e: a new library has appeared: types (creates befuddling error message when you have one yourself) iterators have changed slightly __init__ __iter__ next becomes __init__ __iter__ __next__ urlib2 split into urllib.request and urllib.error https://docs.python.org/2/library/urllib2.html upload of sphinx generated documentation to pypi doesn't work (sphinx-pypi-upload is still only Python 2.x)","title":"Python 2.7 to 3 migration"},{"location":"2016/2016-05-09/python2to3experiences/python2to3migration/#python-27-to-3-migration","text":"","title":"Python 2.7 to 3 migration"},{"location":"2016/2016-05-09/python2to3experiences/python2to3migration/#project","text":"Python 2.7 project: https://github.com/fracpete/python-weka-wrapper Python 3 result: https://github.com/fracpete/python-weka-wrapper3","title":"Project"},{"location":"2016/2016-05-09/python2to3experiences/python2to3migration/#details","text":"Some things have changed: renamed xrange to range different format for exceptions ( as already available in 2.7) python except Exception, e: becomes python except Exception as e: a new library has appeared: types (creates befuddling error message when you have one yourself) iterators have changed slightly __init__ __iter__ next becomes __init__ __iter__ __next__ urlib2 split into urllib.request and urllib.error https://docs.python.org/2/library/urllib2.html upload of sphinx generated documentation to pypi doesn't work (sphinx-pypi-upload is still only Python 2.x)","title":"Details"},{"location":"2016/2016-06-13/","text":"2016-06-13 27 Discussion of PyCon 2016 (https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw) talks, with William Mckee introducing: \u2022 Wendy Grus - When is it good to be bad? Web scraping and data analysis of NHL penalties. \u2022 A. Jesse Jiryu Davis - Write an Excellent Programming Blog.","title":"2016-06-13"},{"location":"2016/2016-06-13/#2016-06-13","text":"","title":"2016-06-13"},{"location":"2016/2016-06-13/#27","text":"Discussion of PyCon 2016 (https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw) talks, with William Mckee introducing: \u2022 Wendy Grus - When is it good to be bad? Web scraping and data analysis of NHL penalties. \u2022 A. Jesse Jiryu Davis - Write an Excellent Programming Blog.","title":"27"},{"location":"2016/2016-07-11/","text":"2016-07-11 28 Let's plan the August meeting, which will be once again an Introduction to Python. This will include distribution of flyers and other advertising, as well as topics to cover during the introduction evening.","title":"2016-07-11"},{"location":"2016/2016-07-11/#2016-07-11","text":"","title":"2016-07-11"},{"location":"2016/2016-07-11/#28","text":"Let's plan the August meeting, which will be once again an Introduction to Python. This will include distribution of flyers and other advertising, as well as topics to cover during the introduction evening.","title":"28"},{"location":"2016/2016-08-08/","text":"2016-08-08 29 Nikola Peter Reutemann delivered a presentation on Nikola static web-site generator. His slide show presentation is available as nikola.odp or nikola.pdf . Introduction to Python Lawrence D'Oliveiro presented an Introduction to Python. Refer to the ipynb file: /ldo/Python Intro Talk 1\u22152.ipynb Click on the launch binder icon to launch the ipynb presentation using binder:","title":"2016-08-08"},{"location":"2016/2016-08-08/#2016-08-08","text":"","title":"2016-08-08"},{"location":"2016/2016-08-08/#29","text":"","title":"29"},{"location":"2016/2016-08-08/#nikola","text":"Peter Reutemann delivered a presentation on Nikola static web-site generator. His slide show presentation is available as nikola.odp or nikola.pdf .","title":"Nikola"},{"location":"2016/2016-08-08/#introduction-to-python","text":"Lawrence D'Oliveiro presented an Introduction to Python. Refer to the ipynb file: /ldo/Python Intro Talk 1\u22152.ipynb Click on the launch binder icon to launch the ipynb presentation using binder:","title":"Introduction to Python"},{"location":"2016/2016-09-12/","text":"2016-09-12 30 Evolution of a Python program Ian Stewart delivered a presentation on the Art of Python. It demonstrates how a python program should have a good structure and how to evaluate the quality of a program. His slide presentation is /ian-python_art/art_of_python.opd Included with his presentation are 4 x circle.py programs of varying complexity. Tkinter template program Ian Stewart presented a code generator that will produce python3 tkinter GUI template programs. His slide show is the file /ian-tkinter_templates/Intro to tkinter generator.odp The presentation demonstrates the creation of a template with 3 x frames, 1 x entry box, 5 x static labels, and 4 x labels with their textvariable linked to a tkinter string variable. Example code is included as the files circle.py and circle_initial.py Introduction to Python - Part 2 Lawrence D'Oliveiro Last month Lawrence delivered the first part of his Introduction to Python. This month he continues to expand on the features of Python. Click on the launch binder icon to launch the ipynb presentation in binder...","title":"2016-09-12"},{"location":"2016/2016-09-12/#2016-09-12","text":"","title":"2016-09-12"},{"location":"2016/2016-09-12/#30","text":"","title":"30"},{"location":"2016/2016-09-12/#evolution-of-a-python-program","text":"Ian Stewart delivered a presentation on the Art of Python. It demonstrates how a python program should have a good structure and how to evaluate the quality of a program. His slide presentation is /ian-python_art/art_of_python.opd Included with his presentation are 4 x circle.py programs of varying complexity.","title":"Evolution of a Python program"},{"location":"2016/2016-09-12/#tkinter-template-program","text":"Ian Stewart presented a code generator that will produce python3 tkinter GUI template programs. His slide show is the file /ian-tkinter_templates/Intro to tkinter generator.odp The presentation demonstrates the creation of a template with 3 x frames, 1 x entry box, 5 x static labels, and 4 x labels with their textvariable linked to a tkinter string variable. Example code is included as the files circle.py and circle_initial.py","title":"Tkinter template program"},{"location":"2016/2016-09-12/#introduction-to-python-part-2","text":"Lawrence D'Oliveiro Last month Lawrence delivered the first part of his Introduction to Python. This month he continues to expand on the features of Python. Click on the launch binder icon to launch the ipynb presentation in binder...","title":"Introduction to Python - Part 2"},{"location":"2016/2016-09-12/ian-python_art/","text":"Art of Python Presentation Slide show art_of_python.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to help with educating those who are new to writing python programs. It demonstrates how a python program should have a good structure and how to evaluate the quality of a program. It should also highlight that having a GUI does not guarantee a superior program over a console terminal based program. The four programs used in the presentation all achieve the same objective of calculating the area of a circle when supplied the radius. The program files are as follows. Files circle_01.py . A simple command line program. circle_02.py . A simple tkinter GUI program. circle_03.py . A more complex command line program. circle_04.py . A more complex tkinter GUI program. First presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Art of Python"},{"location":"2016/2016-09-12/ian-python_art/#art-of-python","text":"","title":"Art of Python"},{"location":"2016/2016-09-12/ian-python_art/#presentation-slide-show","text":"art_of_python.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to help with educating those who are new to writing python programs. It demonstrates how a python program should have a good structure and how to evaluate the quality of a program. It should also highlight that having a GUI does not guarantee a superior program over a console terminal based program. The four programs used in the presentation all achieve the same objective of calculating the area of a circle when supplied the radius. The program files are as follows.","title":"Presentation Slide show"},{"location":"2016/2016-09-12/ian-python_art/#files","text":"circle_01.py . A simple command line program. circle_02.py . A simple tkinter GUI program. circle_03.py . A more complex command line program. circle_04.py . A more complex tkinter GUI program. First presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Files"},{"location":"2016/2016-09-12/ian-tkinter_templates/","text":"Introduction to Tkinter Template Generator Presentation Slide show Intro to tkinter generator.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to introduce a code generator that will produce python3 tkinter GUI template programs. The template program is then edited to produce the desired production GUI program. The presentation demonstrates the creation of a template with 3 x frames, 1 x entry box, 5 x static labels, and 4 x labels with their textvariable linked to a tkinter string variable. Files circle_initial.py . The initial template created by the code generator. circle.py . The completed program. Presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Introduction to Tkinter Template Generator"},{"location":"2016/2016-09-12/ian-tkinter_templates/#introduction-to-tkinter-template-generator","text":"","title":"Introduction to Tkinter Template Generator"},{"location":"2016/2016-09-12/ian-tkinter_templates/#presentation-slide-show","text":"Intro to tkinter generator.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to introduce a code generator that will produce python3 tkinter GUI template programs. The template program is then edited to produce the desired production GUI program. The presentation demonstrates the creation of a template with 3 x frames, 1 x entry box, 5 x static labels, and 4 x labels with their textvariable linked to a tkinter string variable.","title":"Presentation Slide show"},{"location":"2016/2016-09-12/ian-tkinter_templates/#files","text":"circle_initial.py . The initial template created by the code generator. circle.py . The completed program. Presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Files"},{"location":"2016/2016-10-10/","text":"2016-10-10 31 Web2py - Website generator Ian Stewart delivered a web2py presentation. His slide show is the file web2py_presentation.odp .","title":"2016-10-10"},{"location":"2016/2016-10-10/#2016-10-10","text":"","title":"2016-10-10"},{"location":"2016/2016-10-10/#31","text":"","title":"31"},{"location":"2016/2016-10-10/#web2py-website-generator","text":"Ian Stewart delivered a web2py presentation. His slide show is the file web2py_presentation.odp .","title":"Web2py - Website generator"},{"location":"2016/2016-11-14/","text":"2016-11-14 32 Flask - Website Framework William Mckee delivered a presentation on the Flask web-site generator. Refer to the file: /flask/flask.svg Tesla William Mckee delivered a presentation on accessing the API of the Tesla car. Refer to the file: /tesla/teslaapi.svg Modifying a Web2py Web-site The http://hampug.pythonanywhere.com/ web-site was created using web2py framework. Peter Reutemann modified the web-site so that it would pull data about the date of HamPUG meetings from the meetup.com website. Refer to the files in the sub-directory /web2py/ .","title":"2016-11-14"},{"location":"2016/2016-11-14/#2016-11-14","text":"","title":"2016-11-14"},{"location":"2016/2016-11-14/#32","text":"","title":"32"},{"location":"2016/2016-11-14/#flask-website-framework","text":"William Mckee delivered a presentation on the Flask web-site generator. Refer to the file: /flask/flask.svg","title":"Flask - Website Framework"},{"location":"2016/2016-11-14/#tesla","text":"William Mckee delivered a presentation on accessing the API of the Tesla car. Refer to the file: /tesla/teslaapi.svg","title":"Tesla"},{"location":"2016/2016-11-14/#modifying-a-web2py-web-site","text":"The http://hampug.pythonanywhere.com/ web-site was created using web2py framework. Peter Reutemann modified the web-site so that it would pull data about the date of HamPUG meetings from the meetup.com website. Refer to the files in the sub-directory /web2py/ .","title":"Modifying a Web2py Web-site"},{"location":"2016/2016-11-14/web2py/","text":"web2py + meetup.com meetup.py uses the meetup.com API to retrieve the next upcoming meeting. General API: http://www.meetup.com/meetup_api/ Events API: http://www.meetup.com/meetup_api/docs/:urlname/events/#list In the default controller in a web2py instance (eg, hosted on pythonanywhere.com) the default flash can be replaced with API calls outlined in the above script, displaying data retrieved from the API. ```python def next_meetup(): \"\"\" Retrieves the next meeting from meetup.com. \"\"\" url = \"https://api.meetup.com/nzpug-hamilton/events?&sign=true&photo-host=public&page=1\" r = requests.get(url, data={}) j = r.json() timestr = str(datetime.fromtimestamp((j[0][\"time\"] + j[0][\"utc_offset\"]) / 1000)) return timestr def index(): \"\"\" example action using the internationalization operator T and flash rendered by views/default/index.html or views/generic.html if you need a simple wiki simply replace the two lines below with: return auth.wiki() \"\"\" # replace the default \"flash\" with info about the next meeting #response.flash = T(\"Next HamPUG meeting - Monday 14 November 2016 at 7pm\") response.flash = next_meetup() return dict(message=T('Welcome to the Hamilton Python User Group')) ```","title":"web2py + meetup.com"},{"location":"2016/2016-11-14/web2py/#web2py-meetupcom","text":"meetup.py uses the meetup.com API to retrieve the next upcoming meeting. General API: http://www.meetup.com/meetup_api/ Events API: http://www.meetup.com/meetup_api/docs/:urlname/events/#list In the default controller in a web2py instance (eg, hosted on pythonanywhere.com) the default flash can be replaced with API calls outlined in the above script, displaying data retrieved from the API. ```python def next_meetup(): \"\"\" Retrieves the next meeting from meetup.com. \"\"\" url = \"https://api.meetup.com/nzpug-hamilton/events?&sign=true&photo-host=public&page=1\" r = requests.get(url, data={}) j = r.json() timestr = str(datetime.fromtimestamp((j[0][\"time\"] + j[0][\"utc_offset\"]) / 1000)) return timestr def index(): \"\"\" example action using the internationalization operator T and flash rendered by views/default/index.html or views/generic.html if you need a simple wiki simply replace the two lines below with: return auth.wiki() \"\"\" # replace the default \"flash\" with info about the next meeting #response.flash = T(\"Next HamPUG meeting - Monday 14 November 2016 at 7pm\") response.flash = next_meetup() return dict(message=T('Welcome to the Hamilton Python User Group')) ```","title":"web2py + meetup.com"},{"location":"2016/2016-12-13/","text":"2016-12-13 33 Floating Point Lawrence D'Oliveiro delivered a presentation on Floating-Point\u2236 Beyond Standard Python . His presentation is an ipynb file in the sub-folder /ldo/. Click on the launch binder icon to launch his ipynb file in binder...","title":"2016-12-13"},{"location":"2016/2016-12-13/#2016-12-13","text":"","title":"2016-12-13"},{"location":"2016/2016-12-13/#33","text":"","title":"33"},{"location":"2016/2016-12-13/#floating-point","text":"Lawrence D'Oliveiro delivered a presentation on Floating-Point\u2236 Beyond Standard Python . His presentation is an ipynb file in the sub-folder /ldo/. Click on the launch binder icon to launch his ipynb file in binder...","title":"Floating Point"},{"location":"2017/","text":"2017 Meetings of the Hamilton Python Users Group held in 2017 on: 2017-02-13 2017-03-13 2017-04-10 2017-05-08 2017-06-12 2017-07-10 2017-08-10 2017-09-11 2017-10-09 2017-11-13 2017-12-11","title":"2017"},{"location":"2017/#2017","text":"Meetings of the Hamilton Python Users Group held in 2017 on: 2017-02-13 2017-03-13 2017-04-10 2017-05-08 2017-06-12 2017-07-10 2017-08-10 2017-09-11 2017-10-09 2017-11-13 2017-12-11","title":"2017"},{"location":"2017/2017-02-13/","text":"2017-02-13 34 No presentation material uploaded.","title":"2017-02-13"},{"location":"2017/2017-02-13/#2017-02-13","text":"","title":"2017-02-13"},{"location":"2017/2017-02-13/#34","text":"No presentation material uploaded.","title":"34"},{"location":"2017/2017-03-13/","text":"2017-03-13 35 Python Intro Talk 1/2 Lawrence D'Oliveiro Lawrence delivered an introduction into Python, showing off its succinct but easy to read syntax, using Jupyter Notebook. Django Web Framework Peter Reutemann Peter talked about developing web applications using the Django framework.","title":"2017-03-13"},{"location":"2017/2017-03-13/#2017-03-13","text":"","title":"2017-03-13"},{"location":"2017/2017-03-13/#35","text":"","title":"35"},{"location":"2017/2017-03-13/#python-intro-talk-12","text":"Lawrence D'Oliveiro Lawrence delivered an introduction into Python, showing off its succinct but easy to read syntax, using Jupyter Notebook.","title":"Python Intro Talk 1/2"},{"location":"2017/2017-03-13/#django-web-framework","text":"Peter Reutemann Peter talked about developing web applications using the Django framework.","title":"Django Web Framework"},{"location":"2017/2017-04-10/","text":"2017-04-10 36 Pycuda Skcuda Cumpy and Matplotlib Chris Flask Web Framework Ian Stewart Python Intro Talk 2/2 Lawrence D'Oliveiro","title":"2017-04-10"},{"location":"2017/2017-04-10/#2017-04-10","text":"","title":"2017-04-10"},{"location":"2017/2017-04-10/#36","text":"","title":"36"},{"location":"2017/2017-04-10/#pycuda-skcuda-cumpy-and-matplotlib","text":"Chris","title":"Pycuda Skcuda Cumpy and Matplotlib"},{"location":"2017/2017-04-10/#flask-web-framework","text":"Ian Stewart","title":"Flask Web Framework"},{"location":"2017/2017-04-10/#python-intro-talk-22","text":"Lawrence D'Oliveiro","title":"Python Intro Talk 2/2"},{"location":"2017/2017-04-10/ian/","text":"Flask Flask is a microframework for Python web development based on the Werkzeug toolkit and Jinja2 template engine. Pythonanwhere website has four frameworks available for web development: django, web2py, bottle and flask. At the October 2016 HamPUG meeting Ian presented the use of the web2py framework when using an account at pythonanywhere. In this presentation flask is used on a pythonanywhere account to create a simple web-site. The appendix of this presentation includes an overview of installing and using flask locally on your PC / laptop.","title":"Flask"},{"location":"2017/2017-04-10/ian/#flask","text":"Flask is a microframework for Python web development based on the Werkzeug toolkit and Jinja2 template engine. Pythonanwhere website has four frameworks available for web development: django, web2py, bottle and flask. At the October 2016 HamPUG meeting Ian presented the use of the web2py framework when using an account at pythonanywhere. In this presentation flask is used on a pythonanywhere account to create a simple web-site. The appendix of this presentation includes an overview of installing and using flask locally on your PC / laptop.","title":"Flask"},{"location":"2017/2017-05-08/","text":"2017-05-08 37 Presentations from Ian and Lawrence","title":"2017-05-08"},{"location":"2017/2017-05-08/#2017-05-08","text":"","title":"2017-05-08"},{"location":"2017/2017-05-08/#37","text":"Presentations from Ian and Lawrence","title":"37"},{"location":"2017/2017-05-08/ian-client-server/","text":"Client Server Although it might not be obvious, this presentation is about making a speedometer for a bicycle. This speedometer configuration is more conceptual than practical, as it would be rather difficult to ride a bike while looking at a monitor and using a keyboard and mouse. It is designed to introduce you to the client / server programming methodology and the python libraries pydbus, RPi.GPIO, and GTK+. From the hardware perspective it involves: * A bicycle with a magnet attached to the spokes.[1] * A hall effect sensor chip to detect rotation of the bike wheel.[1] * A Raspberry Pi ARM architecture computer.[1] * A GUI display screen, keyboard and mouse. [1]: Testing with simulated input may be performed on a i386 / AMD64 Linux desktop or laptop computer. Running these applications on a laptop may help with understanding client / server methodology. From the sofware perspective it utilizes: * RPi.GPIO python library to provide a call_back to count every rotation of the wheel. * A repeating timer class to provide a call_back at a fixed interval of, say, one second. * Utilizing the real time clock with the built-in time.time() to have time in days, hours, minutes and seconds. * A server application to capture the wheel rotations and perform speed calculations. * A client application to provide the GUI. * Uses the pydbus library to provide DBus interprocess communications between the client and the server applications. Pydbus is a python wrapper for the DBus components of the GObject Introspection repository. Installation If using a Raspberry Pi then install the Raspbian distro or the Ubuntu Mate distro for the R-Pi 2 or 3. If simulating on a desktop/laptop then use a linux distro. E.g. Ubuntu. Both Raspbian and Ubuntu Mate (for R-Pi) include the RPi.GPIO python module for interacting with the R-Pi's GPIO pins. If you have a Raspberry Pi and a Hall Effect sensor module. Connect the Hall Effect sensor to, say, GPIO channel number 2 on the Raspberry Pi. The pydbus library is unlike to have been included with your Raspbian/Ubuntu distro. Enter this console command to install it from the PyPI repository. $ pip3 install pydbus From this github folder copy these gtk_client.py and server.py to your computer. Open one console terminal window, set default to the folder with these client and server applications, and type $ python3 server.py Open another console terminal window, set default to the folder with these client and server applications and type $ python3 gtk_client.py The GUI should now open and if you start riding your bike then you should be getting distances and speeds being displayed. Edit the source code on server.py to set your wheel_circumference to the correct number of meters. If you don't have a R-Pi or hall-effect sensor, then you should see speeds and distances changing on the GUI display as a result of random numbers being generated to simulate wheel rotations. Future While this demonstrates the client / server methodology, enhancements to this code in the future may be: Have one GUI but have multiple server processes supplying data from a variety of sources. Have servers that \"emit\" their data over the DBus, rather than supplying it on commands received from the client. Contents client_server_presentation.odp - Presentation slide show for Impress, etc. gtk_client.py server.py README.md - This file. Presentation Presented at Hamilton Python User Group meeting on Monday, 8 May 2017, by Ian Stewart.","title":"Client Server"},{"location":"2017/2017-05-08/ian-client-server/#client-server","text":"Although it might not be obvious, this presentation is about making a speedometer for a bicycle. This speedometer configuration is more conceptual than practical, as it would be rather difficult to ride a bike while looking at a monitor and using a keyboard and mouse. It is designed to introduce you to the client / server programming methodology and the python libraries pydbus, RPi.GPIO, and GTK+. From the hardware perspective it involves: * A bicycle with a magnet attached to the spokes.[1] * A hall effect sensor chip to detect rotation of the bike wheel.[1] * A Raspberry Pi ARM architecture computer.[1] * A GUI display screen, keyboard and mouse. [1]: Testing with simulated input may be performed on a i386 / AMD64 Linux desktop or laptop computer. Running these applications on a laptop may help with understanding client / server methodology. From the sofware perspective it utilizes: * RPi.GPIO python library to provide a call_back to count every rotation of the wheel. * A repeating timer class to provide a call_back at a fixed interval of, say, one second. * Utilizing the real time clock with the built-in time.time() to have time in days, hours, minutes and seconds. * A server application to capture the wheel rotations and perform speed calculations. * A client application to provide the GUI. * Uses the pydbus library to provide DBus interprocess communications between the client and the server applications. Pydbus is a python wrapper for the DBus components of the GObject Introspection repository.","title":"Client Server"},{"location":"2017/2017-05-08/ian-client-server/#installation","text":"If using a Raspberry Pi then install the Raspbian distro or the Ubuntu Mate distro for the R-Pi 2 or 3. If simulating on a desktop/laptop then use a linux distro. E.g. Ubuntu. Both Raspbian and Ubuntu Mate (for R-Pi) include the RPi.GPIO python module for interacting with the R-Pi's GPIO pins. If you have a Raspberry Pi and a Hall Effect sensor module. Connect the Hall Effect sensor to, say, GPIO channel number 2 on the Raspberry Pi. The pydbus library is unlike to have been included with your Raspbian/Ubuntu distro. Enter this console command to install it from the PyPI repository. $ pip3 install pydbus From this github folder copy these gtk_client.py and server.py to your computer. Open one console terminal window, set default to the folder with these client and server applications, and type $ python3 server.py Open another console terminal window, set default to the folder with these client and server applications and type $ python3 gtk_client.py The GUI should now open and if you start riding your bike then you should be getting distances and speeds being displayed. Edit the source code on server.py to set your wheel_circumference to the correct number of meters. If you don't have a R-Pi or hall-effect sensor, then you should see speeds and distances changing on the GUI display as a result of random numbers being generated to simulate wheel rotations.","title":"Installation"},{"location":"2017/2017-05-08/ian-client-server/#future","text":"While this demonstrates the client / server methodology, enhancements to this code in the future may be: Have one GUI but have multiple server processes supplying data from a variety of sources. Have servers that \"emit\" their data over the DBus, rather than supplying it on commands received from the client.","title":"Future"},{"location":"2017/2017-05-08/ian-client-server/#contents","text":"client_server_presentation.odp - Presentation slide show for Impress, etc. gtk_client.py server.py README.md - This file.","title":"Contents"},{"location":"2017/2017-05-08/ian-client-server/#presentation","text":"Presented at Hamilton Python User Group meeting on Monday, 8 May 2017, by Ian Stewart.","title":"Presentation"},{"location":"2017/2017-05-08/ian-google-talk/","text":"Google Text to Speech This presentation provides an introduction to the Text to Speech facility that is available from Google. The presentation is a LibreOffice Impress slide show. The python3 program google_talk_presenter.py has been written to run this slide show. The program uses the uno module to communicate with Impress. This allows python to launch the slide show and change the slides, etc. The program sends the text for each slide to Google's text to speech url. Google returns this as an mp3 audio stream of speech. Additionally the program can access from local folders .wav or .mp3 files and play these local speech or music files. In conjunction with the program and the slide show, there is a control file \"google_talk_presentation.txt\". This file contains the text to be converted to text and commands to be executed. Here is a snippet from this file... [slide_show_file:google_talk_presentation.odp] [slide:1] [music:entertainer.mp3] [language:english] Hello and welcome to this presentation on the text to speech facility Commands are in brackets and comprise of a keyword and a value. For examples: [language:english] sets the language for the following text to be in English. The text that follows will be submitted to google and returned as English spoken text. [slide:1] This will cause the Impress slide show to display slide number 1. [music:entertainer.mp3] This will look in the current working directory for the file \"entertainer.mp3\". On retrieving this file the music will be played. A line commencing with a # is a comment field. For more information on how to use or write your own control file please read the commented section in the first 100 lines of the google_talk_presentation.txt file. To install and run this presentation copy, create a sub-folder on your linux laptop with LibreOffice. Copy all these files to that folder. Ensure your laptop is on-line to the internet and you have a good quality / high-speed connection. Open a terminal window and set default to the sub-folder, then type: $ python3 google_talk_presenter.py It will launch the slide show. On launching it does an audio level check and prompts with: Audio level OK? [Yes]: Type \"No\" to perform the audio level check again. Type \"Yes\" to start the slide show. Environment This presentation was delived using this environment: * Ubuntu Mate 16.04.2 64-bit / Mate 1.12.1 * LibreOffice Version: 5.1.6.2 * Python 3.5.2 (default, Nov 17 2016, 17:05:23) [GCC 5.4.0 20160609] on linux Installation To install the python uno bridge to control the LibreOffice Impress slide show. $ sudo apt-get install python3-uno Tar file distribution The file google_talk_presentation.tar.gz on github contains the following files: * entertainer.mp3 * espeak_1.wav * espeak_2.wav * google_talk_presentation.odp * google_talk_presentation.txt * google_talk_presenter.py * pico_1.wav * pico_2.wav * README.md * yakety_yak_solo.mp3 Download this file and unzip it.","title":"Google Text to Speech"},{"location":"2017/2017-05-08/ian-google-talk/#google-text-to-speech","text":"This presentation provides an introduction to the Text to Speech facility that is available from Google. The presentation is a LibreOffice Impress slide show. The python3 program google_talk_presenter.py has been written to run this slide show. The program uses the uno module to communicate with Impress. This allows python to launch the slide show and change the slides, etc. The program sends the text for each slide to Google's text to speech url. Google returns this as an mp3 audio stream of speech. Additionally the program can access from local folders .wav or .mp3 files and play these local speech or music files. In conjunction with the program and the slide show, there is a control file \"google_talk_presentation.txt\". This file contains the text to be converted to text and commands to be executed. Here is a snippet from this file... [slide_show_file:google_talk_presentation.odp] [slide:1] [music:entertainer.mp3] [language:english] Hello and welcome to this presentation on the text to speech facility Commands are in brackets and comprise of a keyword and a value. For examples: [language:english] sets the language for the following text to be in English. The text that follows will be submitted to google and returned as English spoken text. [slide:1] This will cause the Impress slide show to display slide number 1. [music:entertainer.mp3] This will look in the current working directory for the file \"entertainer.mp3\". On retrieving this file the music will be played. A line commencing with a # is a comment field. For more information on how to use or write your own control file please read the commented section in the first 100 lines of the google_talk_presentation.txt file. To install and run this presentation copy, create a sub-folder on your linux laptop with LibreOffice. Copy all these files to that folder. Ensure your laptop is on-line to the internet and you have a good quality / high-speed connection. Open a terminal window and set default to the sub-folder, then type: $ python3 google_talk_presenter.py It will launch the slide show. On launching it does an audio level check and prompts with: Audio level OK? [Yes]: Type \"No\" to perform the audio level check again. Type \"Yes\" to start the slide show.","title":"Google Text to Speech"},{"location":"2017/2017-05-08/ian-google-talk/#environment","text":"This presentation was delived using this environment: * Ubuntu Mate 16.04.2 64-bit / Mate 1.12.1 * LibreOffice Version: 5.1.6.2 * Python 3.5.2 (default, Nov 17 2016, 17:05:23) [GCC 5.4.0 20160609] on linux","title":"Environment"},{"location":"2017/2017-05-08/ian-google-talk/#installation","text":"To install the python uno bridge to control the LibreOffice Impress slide show. $ sudo apt-get install python3-uno","title":"Installation"},{"location":"2017/2017-05-08/ian-google-talk/#tar-file-distribution","text":"The file google_talk_presentation.tar.gz on github contains the following files: * entertainer.mp3 * espeak_1.wav * espeak_2.wav * google_talk_presentation.odp * google_talk_presentation.txt * google_talk_presenter.py * pico_1.wav * pico_2.wav * README.md * yakety_yak_solo.mp3 Download this file and unzip it.","title":"Tar file distribution"},{"location":"2017/2017-06-12/","text":"2017-06-12 38 Meeting held at The Cook Cafe and Bar. No presentation material uploaded","title":"2017-06-12"},{"location":"2017/2017-06-12/#2017-06-12","text":"","title":"2017-06-12"},{"location":"2017/2017-06-12/#38","text":"Meeting held at The Cook Cafe and Bar. No presentation material uploaded","title":"38"},{"location":"2017/2017-07-10/","text":"2017-07-10 39 No presentation material uploaded","title":"2017-07-10"},{"location":"2017/2017-07-10/#2017-07-10","text":"","title":"2017-07-10"},{"location":"2017/2017-07-10/#39","text":"No presentation material uploaded","title":"39"},{"location":"2017/2017-08-10/","text":"2017-08-10 40 Classes & Metaclasses Lawrence D'Oliveiro Lawrence delivered a presentation on Classes & Metaclasses Click on launch binder to have binders Jupyter server run Lawrence's python notebook presentation...","title":"2017-08-10"},{"location":"2017/2017-08-10/#2017-08-10","text":"","title":"2017-08-10"},{"location":"2017/2017-08-10/#40","text":"","title":"40"},{"location":"2017/2017-08-10/#classes-metaclasses","text":"Lawrence D'Oliveiro Lawrence delivered a presentation on Classes & Metaclasses Click on launch binder to have binders Jupyter server run Lawrence's python notebook presentation...","title":"Classes &amp; Metaclasses"},{"location":"2017/2017-09-11/","text":"2017-09-11 41 Interactive Data Visualization Using Matplotlib. Lawrence D'Oliveiro Lawrence delivered a Jupyter notebook presentation on Interactive Data Visualization Using Matplotlib. Click the launch binder icon to run Lawrence's ipynb presentation using the binder server...","title":"2017-09-11"},{"location":"2017/2017-09-11/#2017-09-11","text":"","title":"2017-09-11"},{"location":"2017/2017-09-11/#41","text":"","title":"41"},{"location":"2017/2017-09-11/#interactive-data-visualization-using-matplotlib","text":"Lawrence D'Oliveiro Lawrence delivered a Jupyter notebook presentation on Interactive Data Visualization Using Matplotlib. Click the launch binder icon to run Lawrence's ipynb presentation using the binder server...","title":"Interactive Data Visualization Using Matplotlib."},{"location":"2017/2017-10-09/","text":"2017-10-09 42 AsyncIO galore! Lawrence D'Oliveiro Lawrence presented on the AsynIO module. Ian Stewart Ian presentated a bicycle cadence program using the AsyncIO feature now available in Python3.","title":"2017-10-09"},{"location":"2017/2017-10-09/#2017-10-09","text":"","title":"2017-10-09"},{"location":"2017/2017-10-09/#42","text":"","title":"42"},{"location":"2017/2017-10-09/#asyncio-galore","text":"Lawrence D'Oliveiro Lawrence presented on the AsynIO module. Ian Stewart Ian presentated a bicycle cadence program using the AsyncIO feature now available in Python3.","title":"AsyncIO galore!"},{"location":"2017/2017-10-09/ian/","text":"Capture Data with Asyncio The Cycle Analyst and Capturing its Serial Line data with Asyncio The Cycle Analyst is a product that controls and monitors an electic-bike. It has the ability to output ttl serial data every second. The data string of containing 14 fields of status information. A python server application captures the data. The asyncio module is used to capture the data and the pydbus module broadcasts it over the system D-Bus. A python client application uses pydbus to capture the data. After analysis and filtering the data, espeak is used to output a spoken message. Update While using asyncio supported the pydbus ability to publish data on the D-Bus, it was found that it would not support the pydbus method call feature. To support both features it is recommended to use GLib.MainLoop.","title":"Capture Data with Asyncio"},{"location":"2017/2017-10-09/ian/#capture-data-with-asyncio","text":"","title":"Capture Data with Asyncio"},{"location":"2017/2017-10-09/ian/#the-cycle-analyst-and-capturing-its-serial-line-data-with-asyncio","text":"The Cycle Analyst is a product that controls and monitors an electic-bike. It has the ability to output ttl serial data every second. The data string of containing 14 fields of status information. A python server application captures the data. The asyncio module is used to capture the data and the pydbus module broadcasts it over the system D-Bus. A python client application uses pydbus to capture the data. After analysis and filtering the data, espeak is used to output a spoken message.","title":"The Cycle Analyst and Capturing its Serial Line data with Asyncio"},{"location":"2017/2017-10-09/ian/#update","text":"While using asyncio supported the pydbus ability to publish data on the D-Bus, it was found that it would not support the pydbus method call feature. To support both features it is recommended to use GLib.MainLoop.","title":"Update"},{"location":"2017/2017-11-13/","text":"2017-11-13 43 Meeting held at Homestead Bar and Eatery. No presentation material uploaded from this meeting.","title":"2017-11-13"},{"location":"2017/2017-11-13/#2017-11-13","text":"","title":"2017-11-13"},{"location":"2017/2017-11-13/#43","text":"Meeting held at Homestead Bar and Eatery. No presentation material uploaded from this meeting.","title":"43"},{"location":"2017/2017-12-11/","text":"2017-12-11 44 No material uploaded from this meeting.","title":"2017-12-11"},{"location":"2017/2017-12-11/#2017-12-11","text":"","title":"2017-12-11"},{"location":"2017/2017-12-11/#44","text":"No material uploaded from this meeting.","title":"44"},{"location":"2018/","text":"2018 Meetings of the Hamilton Python Users Group held in 2018 on: 2018-02-12 2018-03-12 2018-04-09 2018-05-14 2018-06-11 2018-07-09 2018-08-13 2018-09-10 2018-10-08 2018-11-12 2018-12-10","title":"2018"},{"location":"2018/#2018","text":"Meetings of the Hamilton Python Users Group held in 2018 on: 2018-02-12 2018-03-12 2018-04-09 2018-05-14 2018-06-11 2018-07-09 2018-08-13 2018-09-10 2018-10-08 2018-11-12 2018-12-10","title":"2018"},{"location":"2018/2018-02-12/","text":"2018-02-12 45 Setuptools, Pypi and Mkdocs Peter Reutemann QtChart tutorial GUI demo Ian Stewart","title":"2018-02-12"},{"location":"2018/2018-02-12/#2018-02-12","text":"","title":"2018-02-12"},{"location":"2018/2018-02-12/#45","text":"","title":"45"},{"location":"2018/2018-02-12/#setuptools-pypi-and-mkdocs","text":"Peter Reutemann","title":"Setuptools, Pypi and Mkdocs"},{"location":"2018/2018-02-12/#qtchart-tutorial-gui-demo","text":"Ian Stewart","title":"QtChart tutorial GUI demo"},{"location":"2018/2018-03-12/","text":"2018-03-12 46 Introduction to Python Lawrence D'Oliveiro Lawrence delivered an Introduction to Python. His ipynb presentation file is located at /ldo/Introduction to Python.ipynb Click on the launch binder icon to run the ipynb file in Binder's Jupyter server Installing Python on Windows Ian Stewart Ian delivered a presentation on Installing Python on Windows Refer to the README.md in the /ian/ folder for more details.","title":"2018-03-12"},{"location":"2018/2018-03-12/#2018-03-12","text":"","title":"2018-03-12"},{"location":"2018/2018-03-12/#46","text":"","title":"46"},{"location":"2018/2018-03-12/#introduction-to-python","text":"Lawrence D'Oliveiro Lawrence delivered an Introduction to Python. His ipynb presentation file is located at /ldo/Introduction to Python.ipynb Click on the launch binder icon to run the ipynb file in Binder's Jupyter server","title":"Introduction to Python"},{"location":"2018/2018-03-12/#installing-python-on-windows","text":"Ian Stewart Ian delivered a presentation on Installing Python on Windows Refer to the README.md in the /ian/ folder for more details.","title":"Installing Python on Windows"},{"location":"2018/2018-03-12/ian/","text":"Setting up Python on Windows x64 The Microsoft Windows Operating System currently ships without Python installed. This presentation provides a step-by-step guide to installing Python onto a Windows 7 (64-bit) platform. This guide should also be applicable for other versions of Windows. The installation of Python provides: A terminal session window for running an interactive session of python. The IDLE Integrated Development Environment for Python. Python off-line reference manuals. A web-based Python module documentation reader. The above is all that is needed to commence writing Python programs. Should you wish to enhance the environment in which you do your Python development, then the remainder of the presentation provides these options: Installing Notepad++ as your Python script editor. Installing Jupyter Notebook to run and test snippets of code you develop. Installing PyInstaller so you may distribute and executable version of your code to a Windows User that has not installed Python. The presentation is comprised mostly of screen shots from performing these installations. The intention of this presentation that you have it open on your desktop when doing the installations and use it as a cross-reference. The presentation is available as a powerpoint or pdf file: * Setting up Python on Windows x64.pptx (6MB) * Setting up Python on Windows x64.pdf (5.5MB) Ian Stewart 12 March 2018","title":"Setting up Python on Windows x64"},{"location":"2018/2018-03-12/ian/#setting-up-python-on-windows-x64","text":"The Microsoft Windows Operating System currently ships without Python installed. This presentation provides a step-by-step guide to installing Python onto a Windows 7 (64-bit) platform. This guide should also be applicable for other versions of Windows.","title":"Setting up Python on Windows x64"},{"location":"2018/2018-03-12/ian/#the-installation-of-python-provides","text":"A terminal session window for running an interactive session of python. The IDLE Integrated Development Environment for Python. Python off-line reference manuals. A web-based Python module documentation reader. The above is all that is needed to commence writing Python programs. Should you wish to enhance the environment in which you do your Python development, then the remainder of the presentation provides these options: Installing Notepad++ as your Python script editor. Installing Jupyter Notebook to run and test snippets of code you develop. Installing PyInstaller so you may distribute and executable version of your code to a Windows User that has not installed Python. The presentation is comprised mostly of screen shots from performing these installations. The intention of this presentation that you have it open on your desktop when doing the installations and use it as a cross-reference. The presentation is available as a powerpoint or pdf file: * Setting up Python on Windows x64.pptx (6MB) * Setting up Python on Windows x64.pdf (5.5MB) Ian Stewart 12 March 2018","title":"The installation of Python provides:"},{"location":"2018/2018-04-09/","text":"2018-04-09 47 Classes, Descriptors & Metaclasses Lawrence D'Oliveiro Lawrence delivered a presentation on Classes, Descriptors & Metaclasses His presentation ipynb file is available in the folder /ldo/ Click on the launch binder icon to run the ipynb file in the binder Jupyter server virtual environments Peter Reutemann Peter delivered a presentation on virtual environments with one objective being how not to stuff up your machine . Refer to the folder virtual_environments for the slide show for Peter's presentation.","title":"2018-04-09"},{"location":"2018/2018-04-09/#2018-04-09","text":"","title":"2018-04-09"},{"location":"2018/2018-04-09/#47","text":"","title":"47"},{"location":"2018/2018-04-09/#classes-descriptors-metaclasses","text":"Lawrence D'Oliveiro Lawrence delivered a presentation on Classes, Descriptors & Metaclasses His presentation ipynb file is available in the folder /ldo/ Click on the launch binder icon to run the ipynb file in the binder Jupyter server","title":"Classes, Descriptors &amp; Metaclasses"},{"location":"2018/2018-04-09/#virtual-environments","text":"Peter Reutemann Peter delivered a presentation on virtual environments with one objective being how not to stuff up your machine . Refer to the folder virtual_environments for the slide show for Peter's presentation.","title":"virtual environments"},{"location":"2018/2018-05-14/","text":"2018-05-14 48 Install Jupyter Notebook on Windows and Linux Ian Stewart Ian provided a slide show presentation on how to install Jupyter notebook on both the Linux and Windows operating systems. HI slide show is available at /ian/Jupyter Notebook Install.odp Jupyter Notebook example Peter Reutemann Peter captured the demonstration of using Jupyter Notebook. The ipynb file is in /my_first_notebook/ Click the launch binder icon to have binder provide a Jupyter server to run the ipynb file Python Version - List Comprehension Ian Stewart Ian also provided a presentation on using List Comprehension to check the version of python that is being run. His slide show presetnation is /ian/Python Version Check.odp . It includes an appendix with an alternative approach supplied by Lawrence D'Oliveiro.","title":"2018-05-14"},{"location":"2018/2018-05-14/#2018-05-14","text":"","title":"2018-05-14"},{"location":"2018/2018-05-14/#48","text":"","title":"48"},{"location":"2018/2018-05-14/#install-jupyter-notebook-on-windows-and-linux","text":"Ian Stewart Ian provided a slide show presentation on how to install Jupyter notebook on both the Linux and Windows operating systems. HI slide show is available at /ian/Jupyter Notebook Install.odp","title":"Install Jupyter Notebook on Windows and Linux"},{"location":"2018/2018-05-14/#jupyter-notebook-example","text":"Peter Reutemann Peter captured the demonstration of using Jupyter Notebook. The ipynb file is in /my_first_notebook/ Click the launch binder icon to have binder provide a Jupyter server to run the ipynb file","title":"Jupyter Notebook example"},{"location":"2018/2018-05-14/#python-version-list-comprehension","text":"Ian Stewart Ian also provided a presentation on using List Comprehension to check the version of python that is being run. His slide show presetnation is /ian/Python Version Check.odp . It includes an appendix with an alternative approach supplied by Lawrence D'Oliveiro.","title":"Python Version - List Comprehension"},{"location":"2018/2018-05-14/ian-jupiter/","text":"Installation of Jupyter Notebook Jupyter Notebook is a browser based development environment for writing python code. This presentation is a series of slides that show the steps involved in installing Jupyter Notebook on a Windows platform and on a Linux / Ubuntu platform. Filename: Jupyter Notebook Install.odp Ian Stewart, 2018. CC0.","title":"Installation of Jupyter Notebook"},{"location":"2018/2018-05-14/ian-jupiter/#installation-of-jupyter-notebook","text":"Jupyter Notebook is a browser based development environment for writing python code. This presentation is a series of slides that show the steps involved in installing Jupyter Notebook on a Windows platform and on a Linux / Ubuntu platform. Filename: Jupyter Notebook Install.odp Ian Stewart, 2018. CC0.","title":"Installation of Jupyter Notebook"},{"location":"2018/2018-05-14/ian-python-version/","text":"Python Version Check When writing a python program you might want to ensure that the person running the program is at, or above, a minimum version of python. This presentation demonstrates two methods of checking the version of python. The first method highlights the use of pythons list comprehension capability. Filename: Python Version Check.odp Ian Stewart","title":"Python Version Check"},{"location":"2018/2018-05-14/ian-python-version/#python-version-check","text":"When writing a python program you might want to ensure that the person running the program is at, or above, a minimum version of python. This presentation demonstrates two methods of checking the version of python. The first method highlights the use of pythons list comprehension capability. Filename: Python Version Check.odp Ian Stewart","title":"Python Version Check"},{"location":"2018/2018-05-14/my_first_notebook/","text":"My First Notebook Jupyter Notebook compiled by everyone during the meeting.","title":"My First Notebook"},{"location":"2018/2018-05-14/my_first_notebook/#my-first-notebook","text":"Jupyter Notebook compiled by everyone during the meeting.","title":"My First Notebook"},{"location":"2018/2018-06-11/","text":"2018-06-11 49 Flask / Docker Andreas Loef Andreas' presentation on his microservice Cowsay , built using Flask and deployable via Docker in the cloud. You can view the presentation, by opening presentation.html in your browser. Link to repos: * Talk * Cowsay * Cowbot","title":"2018-06-11"},{"location":"2018/2018-06-11/#2018-06-11","text":"","title":"2018-06-11"},{"location":"2018/2018-06-11/#49","text":"","title":"49"},{"location":"2018/2018-06-11/#flask-docker","text":"Andreas Loef Andreas' presentation on his microservice Cowsay , built using Flask and deployable via Docker in the cloud. You can view the presentation, by opening presentation.html in your browser. Link to repos: * Talk * Cowsay * Cowbot","title":"Flask / Docker"},{"location":"2018/2018-06-11/presentation/","text":"Presentation class: middle, center name: intro ___________________ < Cowsay as a Service > ------------------- \\ ^__^ \\ (oo)\\________ (__)\\ )\\/\\ ||----w | || || Andreas L\u00f6f Outline Introduction to web services Building a basic web service Dockerising it Deploying using Heroku A Slack Application written in Flask What's a Web service? A service offered by an electronic device to another electronic device, using HTTP Supplies an API (SOAP, REST ) Fundamental building blocks in a service based architecture REST (REpresentational State Transfer) Builds on top of HTTP Stateless operations URL driven Uses HTTP Keywords (POST, GET, PUT, DELETE) CRUD Status Codes (2xx, 3xx 4xx, 5xx) Content negotiation JSON XML ??? 2xx - Success 200 - Ok 201 - Created 202 - Accepted 3xx - Redirects 4xx - User error 400 - Bad Request 401 - Unauthorized 404 - Not found 405 - Method not allowed 409 - Conflict 5xx - Server Error HTTP Request GET /say/hello HTTP/1.1 Host: cowsay.io User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Upgrade-Insecure-Requests: 1 DNT: 1 Cache-Control: max-age=0 HTTP Response HTTP/1.1 200 OK Connection: keep-alive Server: gunicorn/19.8.1 Date: Sat, 09 Jun 2018 00:38:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 1140 Via: 1.1 vegur <!DOCTYPE html> <html> snip! </html> Building the Simplest Web Service in Flask Flask Lightweight Web applications or services Jinja2 templates Lots of examples Python 2 and 3 pip3 install Flask Hello world: ```python from flask import Flask app = Flask( name ) @app.route('/') def hello_world(): return 'Hello, World!' if name == ' main ': app.run() --- # Adding Content Negotiation pip3 install flask-accept ```python from flask import Flask, jsonify from flask_accept import accept app = Flask(__name__) @app.route('/') @accept('text/html') def hello_world(): return 'Hello World!' @hello_world.support('application/json') def hello_world_json(): return jsonify(result=\"Hello World!\") if __name__ == '__main__': app.run() class: center, middle Cowsay Codebase https://github.com/aginor/cowsay-as-a-service class: center, middle Content Negotiation Demo Production Environments Flask's built in server is not production grade Make sure the Flask debugger is disabled Manage credentials and secret keys securely Serve static content from a proper webserver No need to waste extra CPU-cycles in Flask Apache or nginx will do it much more efficiently WSGI interfaces Gunicorn uwsgi mod_wsgi (Apache) Deployment options Virtual environments Docker containers class: center, middle Never Commit a Key or Password Docker Containerises applications Not a VM! Allows for shipping of application with dependencies Separate the application from the system and vice-versa Relies on kernel namespaces and control groups for security # For debugging, gives 1 GB image FROM python:3.6 # For smaller images, ~ 90MB #FROM python:3.6-alpine COPY requirements.txt / RUN pip3 install --no-cache-dir -r /requirements.txt COPY cowsay /cowsay WORKDIR / EXPOSE 8000 CMD gunicorn cowsay.app:app --bind=0.0.0.0 --workers=1 --log-file - cowsay.io setup Heroku for web hosting Free plan Cloudflare for DNS hosting Could use caching but haven't enabled it Supports rootless domains Free plan Deploying on Heroku Platform as a Service (PaaS) One of the first if not the first Runs on top of AWS (ie, more expensive than plain AWS) Comes with cli-tool for managing the application Deploy by pushing to a git remote git push heroku master class: center, middle Slack Application Consuming cowsay.io https://github.com/aginor/cowbot Further Reading: http://flask.pocoo.org/ https://pypi.org/project/flask_accept/ https://gist.github.com/alexserver/2fcc26f7e1ebcfc9f6d8 https://devcenter.heroku.com/start","title":"Presentation"},{"location":"2018/2018-06-11/presentation/#presentation","text":"class: middle, center name: intro ___________________ < Cowsay as a Service > ------------------- \\ ^__^ \\ (oo)\\________ (__)\\ )\\/\\ ||----w | || || Andreas L\u00f6f","title":"Presentation"},{"location":"2018/2018-06-11/presentation/#outline","text":"Introduction to web services Building a basic web service Dockerising it Deploying using Heroku A Slack Application written in Flask","title":"Outline"},{"location":"2018/2018-06-11/presentation/#whats-a-web-service","text":"A service offered by an electronic device to another electronic device, using HTTP Supplies an API (SOAP, REST ) Fundamental building blocks in a service based architecture","title":"What's a Web service?"},{"location":"2018/2018-06-11/presentation/#rest-representational-state-transfer","text":"Builds on top of HTTP Stateless operations URL driven Uses HTTP Keywords (POST, GET, PUT, DELETE) CRUD Status Codes (2xx, 3xx 4xx, 5xx) Content negotiation JSON XML ??? 2xx - Success 200 - Ok 201 - Created 202 - Accepted 3xx - Redirects 4xx - User error 400 - Bad Request 401 - Unauthorized 404 - Not found 405 - Method not allowed 409 - Conflict 5xx - Server Error","title":"REST (REpresentational State Transfer)"},{"location":"2018/2018-06-11/presentation/#http-request","text":"GET /say/hello HTTP/1.1 Host: cowsay.io User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: keep-alive Upgrade-Insecure-Requests: 1 DNT: 1 Cache-Control: max-age=0","title":"HTTP Request"},{"location":"2018/2018-06-11/presentation/#http-response","text":"HTTP/1.1 200 OK Connection: keep-alive Server: gunicorn/19.8.1 Date: Sat, 09 Jun 2018 00:38:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 1140 Via: 1.1 vegur <!DOCTYPE html> <html> snip! </html>","title":"HTTP Response"},{"location":"2018/2018-06-11/presentation/#building-the-simplest-web-service-in-flask","text":"Flask Lightweight Web applications or services Jinja2 templates Lots of examples Python 2 and 3 pip3 install Flask Hello world: ```python from flask import Flask app = Flask( name ) @app.route('/') def hello_world(): return 'Hello, World!' if name == ' main ': app.run() --- # Adding Content Negotiation pip3 install flask-accept ```python from flask import Flask, jsonify from flask_accept import accept app = Flask(__name__) @app.route('/') @accept('text/html') def hello_world(): return 'Hello World!' @hello_world.support('application/json') def hello_world_json(): return jsonify(result=\"Hello World!\") if __name__ == '__main__': app.run() class: center, middle","title":"Building the Simplest Web Service in Flask"},{"location":"2018/2018-06-11/presentation/#cowsay-codebase","text":"https://github.com/aginor/cowsay-as-a-service class: center, middle","title":"Cowsay Codebase"},{"location":"2018/2018-06-11/presentation/#content-negotiation-demo","text":"","title":"Content Negotiation Demo"},{"location":"2018/2018-06-11/presentation/#production-environments","text":"Flask's built in server is not production grade Make sure the Flask debugger is disabled Manage credentials and secret keys securely Serve static content from a proper webserver No need to waste extra CPU-cycles in Flask Apache or nginx will do it much more efficiently WSGI interfaces Gunicorn uwsgi mod_wsgi (Apache) Deployment options Virtual environments Docker containers class: center, middle","title":"Production Environments"},{"location":"2018/2018-06-11/presentation/#never-commit-a-key-or-password","text":"","title":"Never Commit a Key or Password"},{"location":"2018/2018-06-11/presentation/#docker","text":"Containerises applications Not a VM! Allows for shipping of application with dependencies Separate the application from the system and vice-versa Relies on kernel namespaces and control groups for security # For debugging, gives 1 GB image FROM python:3.6 # For smaller images, ~ 90MB #FROM python:3.6-alpine COPY requirements.txt / RUN pip3 install --no-cache-dir -r /requirements.txt COPY cowsay /cowsay WORKDIR / EXPOSE 8000 CMD gunicorn cowsay.app:app --bind=0.0.0.0 --workers=1 --log-file -","title":"Docker"},{"location":"2018/2018-06-11/presentation/#cowsayio-setup","text":"Heroku for web hosting Free plan Cloudflare for DNS hosting Could use caching but haven't enabled it Supports rootless domains Free plan","title":"cowsay.io setup"},{"location":"2018/2018-06-11/presentation/#deploying-on-heroku","text":"Platform as a Service (PaaS) One of the first if not the first Runs on top of AWS (ie, more expensive than plain AWS) Comes with cli-tool for managing the application Deploy by pushing to a git remote git push heroku master class: center, middle","title":"Deploying on Heroku"},{"location":"2018/2018-06-11/presentation/#slack-application-consuming-cowsayio","text":"https://github.com/aginor/cowbot","title":"Slack Application Consuming cowsay.io"},{"location":"2018/2018-06-11/presentation/#further-reading","text":"http://flask.pocoo.org/ https://pypi.org/project/flask_accept/ https://gist.github.com/alexserver/2fcc26f7e1ebcfc9f6d8 https://devcenter.heroku.com/start","title":"Further Reading:"},{"location":"2018/2018-07-09/","text":"2018-07-09 50 Python Panda Gary Buczma Gary's Jupyter notebooks on his Python Pandas talk, to unlock and exploit the potential of unstructured data and open data, as a Data science tool. The data file can be downloaded from here . Click on the launch binder icon to launch Binder's Jupyter server to run the Demo.ipynb file... Clic on the launch binder icon to launch Binder's Jupyter server to run the GeoPANDAS.ipynb file...","title":"2018-07-09"},{"location":"2018/2018-07-09/#2018-07-09","text":"","title":"2018-07-09"},{"location":"2018/2018-07-09/#50","text":"","title":"50"},{"location":"2018/2018-07-09/#python-panda","text":"Gary Buczma Gary's Jupyter notebooks on his Python Pandas talk, to unlock and exploit the potential of unstructured data and open data, as a Data science tool. The data file can be downloaded from here . Click on the launch binder icon to launch Binder's Jupyter server to run the Demo.ipynb file... Clic on the launch binder icon to launch Binder's Jupyter server to run the GeoPANDAS.ipynb file...","title":"Python Panda"},{"location":"2018/2018-08-13/","text":"2018-08-13 51 Creating Api Bindings Using ctypes Lawrence D'Oliverio Lawrence delivered a presentation on creating api bindings using ctypes. Lawrence's presentation includes the Jupyter notebook ctypes example.ipnb. Click on the launch binder icon to run this ipynb file in the binder Jupyter server...","title":"2018-08-13"},{"location":"2018/2018-08-13/#2018-08-13","text":"","title":"2018-08-13"},{"location":"2018/2018-08-13/#51","text":"","title":"51"},{"location":"2018/2018-08-13/#creating-api-bindings-using-ctypes","text":"Lawrence D'Oliverio Lawrence delivered a presentation on creating api bindings using ctypes. Lawrence's presentation includes the Jupyter notebook ctypes example.ipnb. Click on the launch binder icon to run this ipynb file in the binder Jupyter server...","title":"Creating Api Bindings Using ctypes"},{"location":"2018/2018-09-10/","text":"2018-09-10 52 WSGI with Waitress Peter Reutemann WSGI with waitress","title":"2018-09-10"},{"location":"2018/2018-09-10/#2018-09-10","text":"","title":"2018-09-10"},{"location":"2018/2018-09-10/#52","text":"","title":"52"},{"location":"2018/2018-09-10/#wsgi-with-waitress","text":"Peter Reutemann WSGI with waitress","title":"WSGI with Waitress"},{"location":"2018/2018-09-10/waitress/","text":"Set up virtual environment initialize virtualenv -p /usr/bin/python3.5 venv install django and waitress venv/bin/pip install django waitress Create django example project Taken from here: https://docs.djangoproject.com/en/2.1/intro/tutorial01/ Generate project venv/bin/django-admin startproject mysite create polls app cd mysite ../venv/bin/python manage.py startapp polls add to polls/views.py ```python from django.http import HttpResponse def index(request): return HttpResponse(\"Hello, world. You're at the polls index.\") ``` add code to polls/urls.py ```python from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), ] ``` edit mysite/urls.py , add entry for polls , update imports ( import include ) ```python from django.contrib import admin from django.urls import include, path urlpatterns = [ path('polls/', include('polls.urls')), path('admin/', admin.site.urls), ] ``` migrate database settings (we leave it at sqlite), from mysite directory ../venv/bin/python manage.py migrate the following steps are used to have a data model that can be accessed via django's admin interface add view for polls ```python from django.db import models class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField('date published') class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0) ``` add app to mysite/settings.py python INSTALLED_APPS = [ 'polls.apps.PollsConfig', ... ] update database ../venv/bin/python manage.py makemigrations polls ../venv/bin/python manage.py migrate make polls accessible in admin interface, edit polls/admin.py ```python from django.contrib import admin from .models import Question admin.site.register(Question) ``` create admin user ../venv/bin/python manage.py createsuperuser run development server and open in browser (http://localhost:8000/polls/) ../venv/bin/python manage.py runserver Configure waitress based on this: https://stackoverflow.com/questions/21081491/hosting-django-app-with-waitress#38943785 create server.py in mysite directory ```python from waitress import serve from mysite.wsgi import application if name == ' main ': serve(application, port='8000') ``` start server with ../venv/bin/python server.py Moving to production during development, django can serve static files ( DEBUG=True in settings.py), but this is considered insecure usually, you run django as WSGI application and let static files being served by Apache or nginx Python alternative: white-noise ../venv/bin/pip install whitenoise adapt your settings.py , adding the white-noise middleware after the SecurityMiddleware : python ... 'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', ... disable debugging in settings.py python DEBUG = False allow all hosts python ALLOWED_HOSTS = ['*'] add root for static files in settings.py python STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') collect static files ../venv/bin/python manage.py collectstatic Serving via https in an exposed system, you really don't want to use http use nginx as reverse proxy, taken from here: https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins nginx waitress configuration ( /etc/nginx/sites-available/waitress ) ```nginx server { listen 80; return 301 https://$host$request_uri; } server { listen 443; server_name localhost; ssl_certificate /etc/nginx/cert.crt; ssl_certificate_key /etc/nginx/cert.key; ssl on; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # Fix the \u201cIt appears that your reverse proxy set up is broken\" error. proxy_pass http://localhost:8000; proxy_read_timeout 90; proxy_redirect http://localhost:8000 https://localhost/; } } ``` Bonus use grip for rendering markdown via a mini webserver grip automatically refreshes the view if the file changes - handy for live editing/previewing","title":"Set up virtual environment"},{"location":"2018/2018-09-10/waitress/#set-up-virtual-environment","text":"initialize virtualenv -p /usr/bin/python3.5 venv install django and waitress venv/bin/pip install django waitress","title":"Set up virtual environment"},{"location":"2018/2018-09-10/waitress/#create-django-example-project","text":"Taken from here: https://docs.djangoproject.com/en/2.1/intro/tutorial01/ Generate project venv/bin/django-admin startproject mysite create polls app cd mysite ../venv/bin/python manage.py startapp polls add to polls/views.py ```python from django.http import HttpResponse def index(request): return HttpResponse(\"Hello, world. You're at the polls index.\") ``` add code to polls/urls.py ```python from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), ] ``` edit mysite/urls.py , add entry for polls , update imports ( import include ) ```python from django.contrib import admin from django.urls import include, path urlpatterns = [ path('polls/', include('polls.urls')), path('admin/', admin.site.urls), ] ``` migrate database settings (we leave it at sqlite), from mysite directory ../venv/bin/python manage.py migrate the following steps are used to have a data model that can be accessed via django's admin interface add view for polls ```python from django.db import models class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField('date published') class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0) ``` add app to mysite/settings.py python INSTALLED_APPS = [ 'polls.apps.PollsConfig', ... ] update database ../venv/bin/python manage.py makemigrations polls ../venv/bin/python manage.py migrate make polls accessible in admin interface, edit polls/admin.py ```python from django.contrib import admin from .models import Question admin.site.register(Question) ``` create admin user ../venv/bin/python manage.py createsuperuser run development server and open in browser (http://localhost:8000/polls/) ../venv/bin/python manage.py runserver","title":"Create django example project"},{"location":"2018/2018-09-10/waitress/#configure-waitress","text":"based on this: https://stackoverflow.com/questions/21081491/hosting-django-app-with-waitress#38943785 create server.py in mysite directory ```python from waitress import serve from mysite.wsgi import application if name == ' main ': serve(application, port='8000') ``` start server with ../venv/bin/python server.py","title":"Configure waitress"},{"location":"2018/2018-09-10/waitress/#moving-to-production","text":"during development, django can serve static files ( DEBUG=True in settings.py), but this is considered insecure usually, you run django as WSGI application and let static files being served by Apache or nginx Python alternative: white-noise ../venv/bin/pip install whitenoise adapt your settings.py , adding the white-noise middleware after the SecurityMiddleware : python ... 'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', ... disable debugging in settings.py python DEBUG = False allow all hosts python ALLOWED_HOSTS = ['*'] add root for static files in settings.py python STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') collect static files ../venv/bin/python manage.py collectstatic","title":"Moving to production"},{"location":"2018/2018-09-10/waitress/#serving-via-https","text":"in an exposed system, you really don't want to use http use nginx as reverse proxy, taken from here: https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins nginx waitress configuration ( /etc/nginx/sites-available/waitress ) ```nginx server { listen 80; return 301 https://$host$request_uri; } server { listen 443; server_name localhost; ssl_certificate /etc/nginx/cert.crt; ssl_certificate_key /etc/nginx/cert.key; ssl on; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_protocols TLSv1.2; ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4; ssl_prefer_server_ciphers on; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # Fix the \u201cIt appears that your reverse proxy set up is broken\" error. proxy_pass http://localhost:8000; proxy_read_timeout 90; proxy_redirect http://localhost:8000 https://localhost/; } } ```","title":"Serving via https"},{"location":"2018/2018-09-10/waitress/#bonus","text":"use grip for rendering markdown via a mini webserver grip automatically refreshes the view if the file changes - handy for live editing/previewing","title":"Bonus"},{"location":"2018/2018-10-08/","text":"2018-10-08 53 Web-Scraping Lawrence D\u2019Oliveiro Lawrnce demonstrated a simple web-scraping task, namely automating the downloading of files from a 3D model archive site, using Python with the BeautifulSoup HTML-analysis library. This could be a useful introduction to those new to the concept of web-scraping. The files for this presentation are in the folder /ldo-web-scraping/ Click on the launch binder icon to run Lawrence's ipynb file on the binder Jupyter server... Intel Basic Speed Comparisons Peter Reutemann Intel claims that their custom Python distribution (https://software.seek.intel.com/python-distribution) delivers \"close-to-native-code performance\". Peter ran some basic speed comparisons to see whether it lives up to that claim. Refer to the files in the folder /intel_distro/ Introduce Data Manipulation Using List Methods Ian Stewart The list() function to convert a string to an array of characters is complemented by a string's join() method. The list methods include append() and pop(0) which allow a list to be used as a fifo buffer. Ian gave a brief Jupyter Notebook presentation to introduce data manipulation using list methods. click the launch binder icon to run Ian's ipynb file in the binder Jupyter server...","title":"2018-10-08"},{"location":"2018/2018-10-08/#2018-10-08","text":"","title":"2018-10-08"},{"location":"2018/2018-10-08/#53","text":"","title":"53"},{"location":"2018/2018-10-08/#web-scraping","text":"Lawrence D\u2019Oliveiro Lawrnce demonstrated a simple web-scraping task, namely automating the downloading of files from a 3D model archive site, using Python with the BeautifulSoup HTML-analysis library. This could be a useful introduction to those new to the concept of web-scraping. The files for this presentation are in the folder /ldo-web-scraping/ Click on the launch binder icon to run Lawrence's ipynb file on the binder Jupyter server...","title":"Web-Scraping"},{"location":"2018/2018-10-08/#intel-basic-speed-comparisons","text":"Peter Reutemann Intel claims that their custom Python distribution (https://software.seek.intel.com/python-distribution) delivers \"close-to-native-code performance\". Peter ran some basic speed comparisons to see whether it lives up to that claim. Refer to the files in the folder /intel_distro/","title":"Intel Basic Speed Comparisons"},{"location":"2018/2018-10-08/#introduce-data-manipulation-using-list-methods","text":"Ian Stewart The list() function to convert a string to an array of characters is complemented by a string's join() method. The list methods include append() and pop(0) which allow a list to be used as a fifo buffer. Ian gave a brief Jupyter Notebook presentation to introduce data manipulation using list methods. click the launch binder icon to run Ian's ipynb file in the binder Jupyter server...","title":"Introduce Data Manipulation Using List Methods"},{"location":"2018/2018-10-08/fifo/","text":"String data manipulation String data manipulation using fifo list methods A Jupyter Notebook presentation to introduce string data manipulation using list methods. The list() function to convert a string to an array of characters is complemented by a string's join() method. The list methods include append(), extend() and pop(0) which allow a list to be used as a fifo buffer. The series of Jupyter notebook cells progress to show the using a fifo list to insert html links into plain text. Ian Stewart - Hamilton Python User Group - 8 October 2018.","title":"String data manipulation"},{"location":"2018/2018-10-08/fifo/#string-data-manipulation","text":"String data manipulation using fifo list methods A Jupyter Notebook presentation to introduce string data manipulation using list methods. The list() function to convert a string to an array of characters is complemented by a string's join() method. The list methods include append(), extend() and pop(0) which allow a list to be used as a fifo buffer. The series of Jupyter notebook cells progress to show the using a fifo list to insert html links into plain text. Ian Stewart - Hamilton Python User Group - 8 October 2018.","title":"String data manipulation"},{"location":"2018/2018-11-12/","text":"2018-11-12 54 Meeting No presentation material from this meeting was uploaaded.","title":"2018-11-12"},{"location":"2018/2018-11-12/#2018-11-12","text":"","title":"2018-11-12"},{"location":"2018/2018-11-12/#54","text":"","title":"54"},{"location":"2018/2018-11-12/#meeting","text":"No presentation material from this meeting was uploaaded.","title":"Meeting"},{"location":"2018/2018-12-10/","text":"2018-12-10 52 Meeting No presentation material was uploaded.","title":"2018-12-10"},{"location":"2018/2018-12-10/#2018-12-10","text":"","title":"2018-12-10"},{"location":"2018/2018-12-10/#52","text":"","title":"52"},{"location":"2018/2018-12-10/#meeting","text":"No presentation material was uploaded.","title":"Meeting"},{"location":"2019/","text":"2019 Meetings of the Hamilton Python Users Group held in 2019 on: 2019-02-11 2019-03-11 2019-04-08 2019-05-13 2019-06-10 2019-07-08 2019-08-12","title":"2019"},{"location":"2019/#2019","text":"Meetings of the Hamilton Python Users Group held in 2019 on: 2019-02-11 2019-03-11 2019-04-08 2019-05-13 2019-06-10 2019-07-08 2019-08-12","title":"2019"},{"location":"2019/2019-02-11/","text":"2019-02-11 56 Web Framework - Django Sum Abiut Sum delivered a presentation on the Django Web Framework. His presentation included installation of Django and getting started by creating a simple web-site. The file django install and get start.pdf is a repeat of Sum's presentation, in which the console commands are captured and screen shots are included of what the web-browser displays.","title":"2019-02-11"},{"location":"2019/2019-02-11/#2019-02-11","text":"","title":"2019-02-11"},{"location":"2019/2019-02-11/#56","text":"","title":"56"},{"location":"2019/2019-02-11/#web-framework-django","text":"Sum Abiut Sum delivered a presentation on the Django Web Framework. His presentation included installation of Django and getting started by creating a simple web-site. The file django install and get start.pdf is a repeat of Sum's presentation, in which the console commands are captured and screen shots are included of what the web-browser displays.","title":"Web Framework - Django"},{"location":"2019/2019-03-11/","text":"2019-03-11 57 Tensorflow Peter Reutemann Peter talked about using Tensorflow to detect burglars and pets Using ~/home/user/bin Directory Ian Stewart Ian showed how to manage your (executable) scripts from your (Linux) home directory","title":"2019-03-11"},{"location":"2019/2019-03-11/#2019-03-11","text":"","title":"2019-03-11"},{"location":"2019/2019-03-11/#57","text":"","title":"57"},{"location":"2019/2019-03-11/#tensorflow","text":"Peter Reutemann Peter talked about using Tensorflow to detect burglars and pets","title":"Tensorflow"},{"location":"2019/2019-03-11/#using-homeuserbin-directory","text":"Ian Stewart Ian showed how to manage your (executable) scripts from your (Linux) home directory","title":"Using ~/home/user/bin Directory"},{"location":"2019/2019-03-11/local_bin/","text":"A Local /bin Directory It is likely that when you log into an account on a Linux desktop computer it will run a .profile file that checks for the existence of a bin folder off your home directory. If Python and Bash scripts with execute status are placed into this /bin directory, then these programs may be run from the bash prompt from anywhere within the users account. This presentation demonstrates some of the advantages of creating a /bin folder. Also considered is how to have subdirectories off the /bin folder contain scripts that can also be executed. With python programming one consideration is in which directory to place python modules you have created. This presentation demonstrates creating a library for python modules off the /bin directories and also creating ~/lib/python directory structure that is recognised as a local Python path. The presentation is available in two forms: bin presentation.odp bin presentation.pdf Ian Stewart - 11 March 2019 - CC0","title":"A Local /bin Directory"},{"location":"2019/2019-03-11/local_bin/#a-local-bin-directory","text":"It is likely that when you log into an account on a Linux desktop computer it will run a .profile file that checks for the existence of a bin folder off your home directory. If Python and Bash scripts with execute status are placed into this /bin directory, then these programs may be run from the bash prompt from anywhere within the users account. This presentation demonstrates some of the advantages of creating a /bin folder. Also considered is how to have subdirectories off the /bin folder contain scripts that can also be executed. With python programming one consideration is in which directory to place python modules you have created. This presentation demonstrates creating a library for python modules off the /bin directories and also creating ~/lib/python directory structure that is recognised as a local Python path. The presentation is available in two forms: bin presentation.odp bin presentation.pdf Ian Stewart - 11 March 2019 - CC0","title":"A Local /bin Directory"},{"location":"2019/2019-03-11/rpi3_and_tensorflow/","text":"Tensorflow on RPi3 Instructions and code are based on: https://github.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi https://raw.githubusercontent.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi/master/Object_detection_picamera.py Base image is Raspbian Stretch lite 2018-11-13: https://www.raspberrypi.org/downloads/raspbian/ http://director.downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2018-11-15/2018-11-13-raspbian-stretch-lite.zip Installation install required dependencies: virtual environments sudo apt-get install virtualenv tensorflow sudo apt-get install git sudo apt-get install libatlas-base-dev sudo apt-get install python3-tk python3-dev sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt-get install qt4-dev-tools sudo apt-get install protobuf-compiler sudo apt-get install libilmbase12 sudo apt-get install libopenexr22 sudo apt-get install ibgstreamer1.0-0 create tensorflow dir: cd ~ mkdir tf cd tf get tensorflow (https://github.com/lhelontra/tensorflow-on-arm/releases): wget https://github.com/lhelontra/tensorflow-on-arm/releases/download/v1.8.0/tensorflow-1.8.0-cp35-none-linux_armv7l.whl create virtualenv: virtualenv -p /usr/bin/python3.5 venv venv/bin/pip install tensorflow-1.8.0-cp35-none-linux_armv7l.whl venv/bin/pip install opencv-python venv/bin/pip install matplotlib venv/bin/pip install pillow clone tensorflow models: git clone --recurse-submodules https://github.com/tensorflow/models.git update PYTHONPATH (~/.bashrc): export PYTHONPATH=$PYTHONPATH:/home/pi/tf/models/research:/home/pi/tf/models/research/slim compile the protobufs: cd ~/tf/models/research protoc object_detection/protos/*.proto --python_out=. download SSD model from tensorflow model zoo: cd ~/tf/models/research/object_detection/ wget http://download.tensorflow.org/models/object_detection/ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz tar -xzvf ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz place object_detection_webcam.py in ~/tf/models/research/object_detection adapt any parameters as required: monitored_labels - the types of objects to monitor threshold_labels - the probabilities (0-1) for each monitored label, other than default probability ( threshold_default ) url , url_user , url_pw - for retrieving images from webcam output_dir - for storing images that triggered capture_interval - the period to wait between frame captures execute script with: ~/tf/venv/bin/python ~/tf/models/research/object_detection/object_detection_webcam.py","title":"Tensorflow on RPi3"},{"location":"2019/2019-03-11/rpi3_and_tensorflow/#tensorflow-on-rpi3","text":"Instructions and code are based on: https://github.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi https://raw.githubusercontent.com/EdjeElectronics/TensorFlow-Object-Detection-on-the-Raspberry-Pi/master/Object_detection_picamera.py Base image is Raspbian Stretch lite 2018-11-13: https://www.raspberrypi.org/downloads/raspbian/ http://director.downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2018-11-15/2018-11-13-raspbian-stretch-lite.zip","title":"Tensorflow on RPi3"},{"location":"2019/2019-03-11/rpi3_and_tensorflow/#installation","text":"install required dependencies: virtual environments sudo apt-get install virtualenv tensorflow sudo apt-get install git sudo apt-get install libatlas-base-dev sudo apt-get install python3-tk python3-dev sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev sudo apt-get install qt4-dev-tools sudo apt-get install protobuf-compiler sudo apt-get install libilmbase12 sudo apt-get install libopenexr22 sudo apt-get install ibgstreamer1.0-0 create tensorflow dir: cd ~ mkdir tf cd tf get tensorflow (https://github.com/lhelontra/tensorflow-on-arm/releases): wget https://github.com/lhelontra/tensorflow-on-arm/releases/download/v1.8.0/tensorflow-1.8.0-cp35-none-linux_armv7l.whl create virtualenv: virtualenv -p /usr/bin/python3.5 venv venv/bin/pip install tensorflow-1.8.0-cp35-none-linux_armv7l.whl venv/bin/pip install opencv-python venv/bin/pip install matplotlib venv/bin/pip install pillow clone tensorflow models: git clone --recurse-submodules https://github.com/tensorflow/models.git update PYTHONPATH (~/.bashrc): export PYTHONPATH=$PYTHONPATH:/home/pi/tf/models/research:/home/pi/tf/models/research/slim compile the protobufs: cd ~/tf/models/research protoc object_detection/protos/*.proto --python_out=. download SSD model from tensorflow model zoo: cd ~/tf/models/research/object_detection/ wget http://download.tensorflow.org/models/object_detection/ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz tar -xzvf ssdlite_mobilenet_v2_coco_2018_05_09.tar.gz place object_detection_webcam.py in ~/tf/models/research/object_detection adapt any parameters as required: monitored_labels - the types of objects to monitor threshold_labels - the probabilities (0-1) for each monitored label, other than default probability ( threshold_default ) url , url_user , url_pw - for retrieving images from webcam output_dir - for storing images that triggered capture_interval - the period to wait between frame captures execute script with: ~/tf/venv/bin/python ~/tf/models/research/object_detection/object_detection_webcam.py","title":"Installation"},{"location":"2019/2019-04-08/","text":"2019-04-08 58 Intro to Python Lawrence D'Oliveriro Lawrence delivered his Intro to Python presentation for 2019. Click the launch binder icon to run Lawrences presentation in binders Jupyter server...","title":"2019-04-08"},{"location":"2019/2019-04-08/#2019-04-08","text":"","title":"2019-04-08"},{"location":"2019/2019-04-08/#58","text":"","title":"58"},{"location":"2019/2019-04-08/#intro-to-python","text":"Lawrence D'Oliveriro Lawrence delivered his Intro to Python presentation for 2019. Click the launch binder icon to run Lawrences presentation in binders Jupyter server...","title":"Intro to Python"},{"location":"2019/2019-05-13/","text":"2019-05-13 59 Presentation on Creating a Website A static web-site, hosted on PythonAnywhere, with web-pages created using reStructuredText and the website generated by the Nikola application. Presenter: Ian Stewart The presention at the meeting held on 13 May 2019 covered the following: - Obtaining a reStructuredText (reST) editor. - Using the editor to create reST web-pages. - Creating a python virtual environment - Installing Nikola static website generator application in the virtual environment. - Using Nikola to convert the reST web-pages into html files and generate the website. - Creating a free beginners account on PythonAnywhere - Uploading the web-site to the PythonAnywhere account. In a somewhat recursive scenario, the presentation that Ian delivered is captured in a website that he created. Please review the website http://hampug1.pythonanywhere.com As part of the presentation Ian performed many linux bash commands to create the basic template for the web-site he built. These commands are attached as the file presentation_history . You can replace your ~/.bash_history file with this presentation_history file. By recalling your bash history in sequence with the bash history commands, !1, !2, !3, etc., you may repeat the delivery in the presentation and create your own template web-site. You may then modify the template to build your own web-site. As part of the presentation a modified Nikola conf.py file is used called conf_quiet.py . Please find this file in this repository and place it in your home folder. The conf_quiet.py file is the conf.py file with edits in four places. Search with the string Edited by Ian to see what the editing involved. Attached are the files: - presentation_history - conf_quiet.py The presentation_history file is installed on your linux laptop computer as follows: - Place the presentation_history file into your home folder. I.e. Your ~/ folder. - Open one console terminal window on your laptop. - Check that you have .bash_history file. $ ls -l .bash_history - Make a backup: $ cp .bash_history bash_history_backup_$(date '+%Y%m%d-%H%M%S') - Overwrite the bash_history: $ cp presentation_history .bash_history - Clear history currently in memory: $ history -c - Close the console terminal window. Open a console terminal window. The history for this terminal will now contain the bash commands to learn about Nikola and create a template web-site. Execute the commands sequencially using the history recall as follows: $ !1 then $ !2 then $ !3 etc.","title":"2019-05-13"},{"location":"2019/2019-05-13/#2019-05-13","text":"","title":"2019-05-13"},{"location":"2019/2019-05-13/#59","text":"","title":"59"},{"location":"2019/2019-05-13/#presentation-on-creating-a-website","text":"","title":"Presentation on Creating a Website"},{"location":"2019/2019-05-13/#a-static-web-site-hosted-on-pythonanywhere-with-web-pages-created-using-restructuredtext-and-the-website-generated-by-the-nikola-application","text":"Presenter: Ian Stewart The presention at the meeting held on 13 May 2019 covered the following: - Obtaining a reStructuredText (reST) editor. - Using the editor to create reST web-pages. - Creating a python virtual environment - Installing Nikola static website generator application in the virtual environment. - Using Nikola to convert the reST web-pages into html files and generate the website. - Creating a free beginners account on PythonAnywhere - Uploading the web-site to the PythonAnywhere account. In a somewhat recursive scenario, the presentation that Ian delivered is captured in a website that he created. Please review the website http://hampug1.pythonanywhere.com As part of the presentation Ian performed many linux bash commands to create the basic template for the web-site he built. These commands are attached as the file presentation_history . You can replace your ~/.bash_history file with this presentation_history file. By recalling your bash history in sequence with the bash history commands, !1, !2, !3, etc., you may repeat the delivery in the presentation and create your own template web-site. You may then modify the template to build your own web-site. As part of the presentation a modified Nikola conf.py file is used called conf_quiet.py . Please find this file in this repository and place it in your home folder. The conf_quiet.py file is the conf.py file with edits in four places. Search with the string Edited by Ian to see what the editing involved. Attached are the files: - presentation_history - conf_quiet.py The presentation_history file is installed on your linux laptop computer as follows: - Place the presentation_history file into your home folder. I.e. Your ~/ folder. - Open one console terminal window on your laptop. - Check that you have .bash_history file. $ ls -l .bash_history - Make a backup: $ cp .bash_history bash_history_backup_$(date '+%Y%m%d-%H%M%S') - Overwrite the bash_history: $ cp presentation_history .bash_history - Clear history currently in memory: $ history -c - Close the console terminal window. Open a console terminal window. The history for this terminal will now contain the bash commands to learn about Nikola and create a template web-site. Execute the commands sequencially using the history recall as follows: $ !1 then $ !2 then $ !3 etc.","title":"A static web-site, hosted on PythonAnywhere, with web-pages created using reStructuredText and the website generated by the Nikola application."},{"location":"2019/2019-06-10/","text":"2019-06-10 60 ETL - Extract, Transform, Load Peter Reutemann presented and Overview of available ETL frameworks: https://blog.panoply.io/top-9-python-etl-tools-and-when-to-use-them Further list from petl: https://petl.readthedocs.io/en/stable/related_work.html Covered in the presentation: * pandas * bonobo * bubbles * petl Execution times (in seconds) pandas: 92.8 bonobo: N/A bubbles: 87.1 (though without additional columns) petl: 281.1 Line Drawing with Linux Ian Stewart demoed some development python code to play on-line radio stations. This code has a retro look and the User interacts with a console terminal window. Ian also introduced the curses module that provides console terminal line drawing. A ipynb presentation highlights the line drawing sets that Liinux supports. Click the launch binder icon to run the ipynb file in Binders Jupyter server.","title":"2019-06-10"},{"location":"2019/2019-06-10/#2019-06-10","text":"","title":"2019-06-10"},{"location":"2019/2019-06-10/#60","text":"","title":"60"},{"location":"2019/2019-06-10/#etl-extract-transform-load","text":"Peter Reutemann presented and Overview of available ETL frameworks: https://blog.panoply.io/top-9-python-etl-tools-and-when-to-use-them Further list from petl: https://petl.readthedocs.io/en/stable/related_work.html Covered in the presentation: * pandas * bonobo * bubbles * petl","title":"ETL - Extract, Transform, Load"},{"location":"2019/2019-06-10/#execution-times-in-seconds","text":"pandas: 92.8 bonobo: N/A bubbles: 87.1 (though without additional columns) petl: 281.1","title":"Execution times (in seconds)"},{"location":"2019/2019-06-10/#line-drawing-with-linux","text":"Ian Stewart demoed some development python code to play on-line radio stations. This code has a retro look and the User interacts with a console terminal window. Ian also introduced the curses module that provides console terminal line drawing. A ipynb presentation highlights the line drawing sets that Liinux supports. Click the launch binder icon to run the ipynb file in Binders Jupyter server.","title":"Line Drawing with Linux"},{"location":"2019/2019-06-10/bonobo/","text":"bonobo Bonobo is a lightweight Extract-Transform-Load (ETL) framework for Python 3.5+. It provides tools for building data transformation pipelines, using plain python primitives, and executing them in parallel. https://www.bonobo-project.org/ Setup sudo apt-get install libmysqlclient-dev postgresql-server-dev-all python3 -m venv venv ./venv/bin/pip install -r requirements.txt What's happening nothing unfortunately Pros/Cons C: database access very alpha/hacky","title":"bonobo"},{"location":"2019/2019-06-10/bonobo/#bonobo","text":"Bonobo is a lightweight Extract-Transform-Load (ETL) framework for Python 3.5+. It provides tools for building data transformation pipelines, using plain python primitives, and executing them in parallel. https://www.bonobo-project.org/","title":"bonobo"},{"location":"2019/2019-06-10/bonobo/#setup","text":"sudo apt-get install libmysqlclient-dev postgresql-server-dev-all python3 -m venv venv ./venv/bin/pip install -r requirements.txt","title":"Setup"},{"location":"2019/2019-06-10/bonobo/#whats-happening","text":"nothing unfortunately","title":"What's happening"},{"location":"2019/2019-06-10/bonobo/#proscons","text":"C: database access very alpha/hacky","title":"Pros/Cons"},{"location":"2019/2019-06-10/bubbles/","text":"bubbles Bubbles is a Python ETL Framework and set of tools. It can be used for processing, auditing and inspecting data. Focus is on understandability and transparency of the proce http://bubbles.databrewery.org/ Setup sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt What's happening migrate data from SQLite database to MySQL one import CSV file into MySQL Pros/Cons P: row-based approach C: extremely limited documentation C: failed to add rows (maybe via pipeline approach?)","title":"bubbles"},{"location":"2019/2019-06-10/bubbles/#bubbles","text":"Bubbles is a Python ETL Framework and set of tools. It can be used for processing, auditing and inspecting data. Focus is on understandability and transparency of the proce http://bubbles.databrewery.org/","title":"bubbles"},{"location":"2019/2019-06-10/bubbles/#setup","text":"sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt","title":"Setup"},{"location":"2019/2019-06-10/bubbles/#whats-happening","text":"migrate data from SQLite database to MySQL one import CSV file into MySQL","title":"What's happening"},{"location":"2019/2019-06-10/bubbles/#proscons","text":"P: row-based approach C: extremely limited documentation C: failed to add rows (maybe via pipeline approach?)","title":"Pros/Cons"},{"location":"2019/2019-06-10/data/","text":"data Employees database Available from here (requires gunzip ): https://github.com/fracpete/employees-db-sqlite Social media Linking of employees to random twitter handles: socialmedia.csv","title":"data"},{"location":"2019/2019-06-10/data/#data","text":"","title":"data"},{"location":"2019/2019-06-10/data/#employees-database","text":"Available from here (requires gunzip ): https://github.com/fracpete/employees-db-sqlite","title":"Employees database"},{"location":"2019/2019-06-10/data/#social-media","text":"Linking of employees to random twitter handles: socialmedia.csv","title":"Social media"},{"location":"2019/2019-06-10/ian/","text":"Line Drawing Characters There are sets of line drawing characters. They reside in the range from 9480 through 9628. For example the python code print(chr(9492)) will display the character that is a bottom left corner of a rectangle. The notebook file line_drawing.ipynb demonstrates the line drawing sets available.","title":"Line Drawing Characters"},{"location":"2019/2019-06-10/ian/#line-drawing-characters","text":"There are sets of line drawing characters. They reside in the range from 9480 through 9628. For example the python code print(chr(9492)) will display the character that is a bottom left corner of a rectangle. The notebook file line_drawing.ipynb demonstrates the line drawing sets available.","title":"Line Drawing Characters"},{"location":"2019/2019-06-10/pandas/","text":"Pandas pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. http://pandas.pydata.org/ Setup sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt Number of dependencies: $ ./venv/bin/pip freeze | wc -l 8 What's happening converting SQLite employees database to MySQL extending table by inserting employee email address adding social media information (twitter handles) from a CSV file as separate table Pros/Cons P: very flexible P: good documentation, lots of examples C: loads all rows into memory (use chunking)","title":"Pandas"},{"location":"2019/2019-06-10/pandas/#pandas","text":"pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. http://pandas.pydata.org/","title":"Pandas"},{"location":"2019/2019-06-10/pandas/#setup","text":"sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt Number of dependencies: $ ./venv/bin/pip freeze | wc -l 8","title":"Setup"},{"location":"2019/2019-06-10/pandas/#whats-happening","text":"converting SQLite employees database to MySQL extending table by inserting employee email address adding social media information (twitter handles) from a CSV file as separate table","title":"What's happening"},{"location":"2019/2019-06-10/pandas/#proscons","text":"P: very flexible P: good documentation, lots of examples C: loads all rows into memory (use chunking)","title":"Pros/Cons"},{"location":"2019/2019-06-10/petl/","text":"petl petl is a general purpose Python package for extracting, transforming and loading tables of data. NB: Automatic table creation via SQLAlchemy. Setup sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt What's happening converting SQLite employees database to MySQL (almost) extending table by inserting employee email address adding social media information (twitter handles) from a CSV file as separate table Pros/Cons P: good documentation, lots of examples P: fast P: lots of utility functions C: database inserts are slower than through pandas","title":"petl"},{"location":"2019/2019-06-10/petl/#petl","text":"petl is a general purpose Python package for extracting, transforming and loading tables of data. NB: Automatic table creation via SQLAlchemy.","title":"petl"},{"location":"2019/2019-06-10/petl/#setup","text":"sudo apt-get install libmysqlclient-dev python3 -m venv venv ./venv/bin/pip install -r requirements.txt","title":"Setup"},{"location":"2019/2019-06-10/petl/#whats-happening","text":"converting SQLite employees database to MySQL (almost) extending table by inserting employee email address adding social media information (twitter handles) from a CSV file as separate table","title":"What's happening"},{"location":"2019/2019-06-10/petl/#proscons","text":"P: good documentation, lots of examples P: fast P: lots of utility functions C: database inserts are slower than through pandas","title":"Pros/Cons"},{"location":"2019/2019-07-08/","text":"2019-07-08 61 PEP484 - Type hinting Jupyter Kernels (Thanks to Ian Stewart) .... Click on the launch binder icon to run the ipynb file in the binder Jupyter server...","title":"2019-07-08"},{"location":"2019/2019-07-08/#2019-07-08","text":"","title":"2019-07-08"},{"location":"2019/2019-07-08/#61","text":"PEP484 - Type hinting Jupyter Kernels (Thanks to Ian Stewart) .... Click on the launch binder icon to run the ipynb file in the binder Jupyter server...","title":"61"},{"location":"2019/2019-07-08/jupyter_kernels/","text":"Jupyter kernels xeus-cling - Jupyter kernel for C++ Available through Anaconda Installation Jupyter Notebook Jupyter Notebook (formerly IPython Notebooks) is a web-based interactive computational environment for creating, executing, and visualizing Jupyter notebooks. By default Jupyter Notebook ships with the IPython kernel to provide execution of Python code. Project Jupyter's name is a reference to the three core programming languages supported by Jupyter, which are Julia, Python and R, and also an homage to Galileo's notebooks recording the discovery of the moons of Jupiter. Jupyter notebook is normally installed as a local application. For example: sudo apt install python3-notebook jupyter jupyter-core python-ipykernel It is launched from a console command line with $ jupyter-notebook The notebook files that are created have the extension .ipynb Binder This is a web-site that provides an on-line Jupyter notebook executable environment. Your .ipynb files may be placed in a repository where you have an account, like: GitHub, Gist, GitLab.com, Git repository, Zenodo DOI. By going to the Binder home directory, https://gke.mybinder.org/ you can build a URL that will launch and execute your ipynb file in your repository. For example the URL field is: https://github.com/HamPUG/meetings/ and the Path to a notebook file (optional): 2019/2019-07-08/jupyter_kernels/test.ipynb Binder will produce a URL of: https://mybinder.org/v2/gh/HamPUG/meetings/master?filepath=2019%2F2019-07-08%2Fjupyter_kernels%2Ftest.ipynb On opening a browser tab with the above URL then binder will provide an executable session of the test.ipynb notebook. Additionally the binder web-site provides markdown or restructured text code so that an icon may be embedded into the README to launch the executable session. For example the markdown code to produce the launch binder icon is: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/HamPUG/meetings/master?filepath=2019%2F2019-07-08%2Fjupyter_kernels%2Ftest.ipynb) C++ and Binder The language C++ normally requires its code to be compiled and then it can be executed. The project cling https://root.cern.ch/cling provides an interactive C++ interpreter. The project xeus-cling is a Jupyter kernel for C++ based on the C++ interpreter cling and the native implementation of the Jupyter protocol xeus. Xeus-cling is installed using the anaconda package manager. https://xeus-cling.readthedocs.io/en/latest/installation.html On scrolling down the README at the xeus-cling github site https://github.com/QuantStack/xeus-cling you will see that you can launch Binder. This will provide and run Jupyter C++ online.","title":"Jupyter kernels"},{"location":"2019/2019-07-08/jupyter_kernels/#jupyter-kernels","text":"xeus-cling - Jupyter kernel for C++ Available through Anaconda Installation","title":"Jupyter kernels"},{"location":"2019/2019-07-08/jupyter_kernels/#jupyter-notebook","text":"Jupyter Notebook (formerly IPython Notebooks) is a web-based interactive computational environment for creating, executing, and visualizing Jupyter notebooks. By default Jupyter Notebook ships with the IPython kernel to provide execution of Python code. Project Jupyter's name is a reference to the three core programming languages supported by Jupyter, which are Julia, Python and R, and also an homage to Galileo's notebooks recording the discovery of the moons of Jupiter. Jupyter notebook is normally installed as a local application. For example: sudo apt install python3-notebook jupyter jupyter-core python-ipykernel It is launched from a console command line with $ jupyter-notebook The notebook files that are created have the extension .ipynb","title":"Jupyter Notebook"},{"location":"2019/2019-07-08/jupyter_kernels/#binder","text":"This is a web-site that provides an on-line Jupyter notebook executable environment. Your .ipynb files may be placed in a repository where you have an account, like: GitHub, Gist, GitLab.com, Git repository, Zenodo DOI. By going to the Binder home directory, https://gke.mybinder.org/ you can build a URL that will launch and execute your ipynb file in your repository. For example the URL field is: https://github.com/HamPUG/meetings/ and the Path to a notebook file (optional): 2019/2019-07-08/jupyter_kernels/test.ipynb Binder will produce a URL of: https://mybinder.org/v2/gh/HamPUG/meetings/master?filepath=2019%2F2019-07-08%2Fjupyter_kernels%2Ftest.ipynb On opening a browser tab with the above URL then binder will provide an executable session of the test.ipynb notebook. Additionally the binder web-site provides markdown or restructured text code so that an icon may be embedded into the README to launch the executable session. For example the markdown code to produce the launch binder icon is: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/HamPUG/meetings/master?filepath=2019%2F2019-07-08%2Fjupyter_kernels%2Ftest.ipynb)","title":"Binder"},{"location":"2019/2019-07-08/jupyter_kernels/#c-and-binder","text":"The language C++ normally requires its code to be compiled and then it can be executed. The project cling https://root.cern.ch/cling provides an interactive C++ interpreter. The project xeus-cling is a Jupyter kernel for C++ based on the C++ interpreter cling and the native implementation of the Jupyter protocol xeus. Xeus-cling is installed using the anaconda package manager. https://xeus-cling.readthedocs.io/en/latest/installation.html On scrolling down the README at the xeus-cling github site https://github.com/QuantStack/xeus-cling you will see that you can launch Binder. This will provide and run Jupyter C++ online.","title":"C++ and Binder"},{"location":"2019/2019-07-08/pep484_type_hinting/","text":"Type hinting defined in PEP484 defines types for parameters and return values can be checked by tools like mypy","title":"Type hinting"},{"location":"2019/2019-07-08/pep484_type_hinting/#type-hinting","text":"defined in PEP484 defines types for parameters and return values can be checked by tools like mypy","title":"Type hinting"},{"location":"2019/2019-08-12/","text":"2019-08-12 62 Lawrence D'Oliveiro Lawrence presented on the latest version of Blender.","title":"2019-08-12"},{"location":"2019/2019-08-12/#2019-08-12","text":"","title":"2019-08-12"},{"location":"2019/2019-08-12/#62","text":"Lawrence D'Oliveiro Lawrence presented on the latest version of Blender.","title":"62"}]}